{
  "info": {
    "title": "Calculations Web Services",
    "description": "Molecule calculations webservice implementation",
    "version": "22.19"
  },
  "paths": {
    "/rest-v1/calculator/batch/calculate": {
      "post": {
        "tags": [
          "Calculator"
        ],
        "summary": "Proceed multiple calculations on multiple structures",
        "operationId": "calculateBatchAggregated",
        "responses": {
          "400": {
            "description": "Un-parsable structure or other invalid value in the request.",
            "schema": {
              "$ref": "#/definitions/BatchAggregatedCalculationsResult"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/BatchAggregatedCalculationsRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/rest-v1/calculator/calculate": {
      "post": {
        "tags": [
          "Calculator"
        ],
        "summary": "Proceed multiple calculations on a single structure.",
        "operationId": "calculateAggregated",
        "responses": {
          "400": {
            "description": "Un-parsable structure or other invalid value in the request.",
            "schema": {
              "$ref": "#/definitions/AggregatedCalculationsResult"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AggregatedCalculationsRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/rest-v1/calculator/calculate/charge": {
      "post": {
        "tags": [
          "Calculator"
        ],
        "summary": "Charge calculation.",
        "operationId": "calculateCharge",
        "responses": {
          "400": {
            "description": "Un-parsable structure or other invalid value in the request.",
            "schema": {
              "$ref": "#/definitions/ChargeResult"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StructureRequestChargeRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/rest-v1/calculator/calculate/cns-mpo": {
      "post": {
        "tags": [
          "Calculator"
        ],
        "summary": "CNS MPO calculation.",
        "operationId": "calculateCnsMpo",
        "responses": {
          "400": {
            "description": "Un-parsable structure or other invalid value in the request.",
            "schema": {
              "$ref": "#/definitions/CnsMpoResult"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StructureRequestCnsMpoRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/rest-v1/calculator/calculate/conformer": {
      "post": {
        "tags": [
          "Calculator"
        ],
        "summary": "Conformer calculation.",
        "operationId": "calculateConformers",
        "responses": {
          "400": {
            "description": "Un-parsable structure or other invalid value in the request.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConformerResult"
              }
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StructureRequestConformerRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/rest-v1/calculator/calculate/elemental-analysis": {
      "post": {
        "tags": [
          "Calculator"
        ],
        "summary": "Elemental analysis calculation.",
        "operationId": "calculateElementalAnalysis",
        "responses": {
          "400": {
            "description": "Un-parsable structure or other invalid value in the request.",
            "schema": {
              "$ref": "#/definitions/ElementalAnalyserResult"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StructureRequestElementalAnalyserRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/rest-v1/calculator/calculate/hbda": {
      "post": {
        "tags": [
          "Calculator"
        ],
        "summary": "HBDA calculation.",
        "operationId": "calculateHBDA",
        "responses": {
          "400": {
            "description": "Un-parsable structure or other invalid value in the request.",
            "schema": {
              "$ref": "#/definitions/HBDAResult"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StructureRequestHBDARequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/rest-v1/calculator/calculate/herg-activity": {
      "post": {
        "tags": [
          "Calculator"
        ],
        "summary": "hERG activity calculation. (Beta)",
        "description": "Documentation: https://docs.chemaxon.com/display/docs/herg.md",
        "operationId": "calculateHergActivity",
        "responses": {
          "400": {
            "description": "Un-parsable structure or other invalid value in the request.",
            "schema": {
              "$ref": "#/definitions/HergActivityResult"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StructureRequestHergRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/rest-v1/calculator/calculate/herg-class": {
      "post": {
        "tags": [
          "Calculator"
        ],
        "summary": "hERG class calculation. (Beta)",
        "description": "Documentation: https://docs.chemaxon.com/display/docs/herg.md",
        "operationId": "calculateHergClass",
        "responses": {
          "400": {
            "description": "Un-parsable structure or other invalid value in the request.",
            "schema": {
              "$ref": "#/definitions/HergClassResult"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StructureRequestHergRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/rest-v1/calculator/calculate/hlb": {
      "post": {
        "tags": [
          "Calculator"
        ],
        "summary": "HLB number calculation.",
        "description": "The hydrophilic-lipophilic balance number (HLB number) measures the degree of a molecule being hydrophilic or lipophilic. This number is calculated based on identifying various hydrophil and liphophil regions in the molecule. This number is a commonly used descriptor in any workflow in which lipid based delivery can be an option. (e.g. lipid-based drug delivery, cosmetics)",
        "operationId": "calculateHLB",
        "responses": {
          "400": {
            "description": "Un-parsable structure or other invalid value in the request.",
            "schema": {
              "$ref": "#/definitions/HLBResult"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StructureRequestHLBRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/rest-v1/calculator/calculate/isoelectric-point": {
      "post": {
        "tags": [
          "Calculator"
        ],
        "summary": "Isoelectric point calculation.",
        "operationId": "calculateIsoelectricPoint",
        "responses": {
          "400": {
            "description": "Un-parsable structure or other invalid value in the request.",
            "schema": {
              "$ref": "#/definitions/IsoelectricPointResult"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StructureRequestIsoelectricPointRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/rest-v1/calculator/calculate/logd": {
      "post": {
        "tags": [
          "Calculator"
        ],
        "summary": "LogD calculation.",
        "operationId": "calculateLogD",
        "responses": {
          "400": {
            "description": "Un-parsable structure or other invalid value in the request.",
            "schema": {
              "$ref": "#/definitions/LogDResult"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StructureRequestLogDRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/rest-v1/calculator/calculate/logp": {
      "post": {
        "tags": [
          "Calculator"
        ],
        "summary": "LogP calculation.",
        "operationId": "calculateLogP",
        "responses": {
          "400": {
            "description": "Un-parsable structure or other invalid value in the request.",
            "schema": {
              "$ref": "#/definitions/LogPResult"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StructureRequestLogPRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/rest-v1/calculator/calculate/major-microspecies": {
      "post": {
        "tags": [
          "Calculator"
        ],
        "summary": "Major microspecies calculation.",
        "operationId": "calculateMajorMicrospecies",
        "responses": {
          "400": {
            "description": "Un-parsable structure or other invalid value in the request.",
            "schema": {
              "$ref": "#/definitions/MajorMicrospeciesResult"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StructureRequestMajorMicrospeciesRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/rest-v1/calculator/calculate/partial-elemental-analysis": {
      "post": {
        "tags": [
          "Calculator"
        ],
        "summary": "Partial elemental analysis calculation.",
        "operationId": "calculatePartialElementalAnalysis",
        "responses": {
          "400": {
            "description": "Un-parsable structure or other invalid value in the request.",
            "schema": {
              "$ref": "#/definitions/PartialElementalAnalysisResult"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StructureRequestPartialElementalAnalysisRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/rest-v1/calculator/calculate/pka": {
      "post": {
        "tags": [
          "Calculator"
        ],
        "summary": "pKa calculation.",
        "operationId": "calculatePKA",
        "responses": {
          "400": {
            "description": "Un-parsable structure or other invalid value in the request.",
            "schema": {
              "$ref": "#/definitions/PKAResult"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StructureRequestPKARequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/rest-v1/calculator/calculate/pka-distribution": {
      "post": {
        "tags": [
          "Calculator"
        ],
        "summary": "pKa distribution calculation.",
        "operationId": "calculatePKADistribution",
        "responses": {
          "400": {
            "description": "Un-parsable structure or other invalid value in the request.",
            "schema": {
              "$ref": "#/definitions/PKADistributionResult"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StructureRequestPKADistributionRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/rest-v1/calculator/calculate/polar-surface-area": {
      "post": {
        "tags": [
          "Calculator"
        ],
        "summary": "Polar surface area (PSA) calculation.",
        "operationId": "calculatePolarSurfaceArea",
        "responses": {
          "400": {
            "description": "Un-parsable structure or other invalid value in the request.",
            "schema": {
              "$ref": "#/definitions/PolarSurfaceAreaResult"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StructureRequestPolarSurfaceAreaRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/rest-v1/calculator/calculate/solubility": {
      "post": {
        "tags": [
          "Calculator"
        ],
        "summary": "Solubility calculation.",
        "operationId": "calculateSolubility",
        "responses": {
          "400": {
            "description": "Un-parsable structure or other invalid value in the request.",
            "schema": {
              "$ref": "#/definitions/SolubilityResult"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StructureRequestSolubilityRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/rest-v1/calculator/calculate/stereoisomer": {
      "post": {
        "tags": [
          "Calculator"
        ],
        "summary": "Stereoisomer calculation.",
        "description": "Enumerates stereoisomers of the specified molecule. Iterate over all tetrahedral and cis-trans stereocenters.",
        "operationId": "calculateStereoisomer",
        "responses": {
          "400": {
            "description": "Un-parsable structure or other invalid value in the request.",
            "schema": {
              "$ref": "#/definitions/StereoisomerResult"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StructureRequestStereoisomerRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/rest-v1/calculator/calculate/tautomerization-canonical": {
      "post": {
        "tags": [
          "Calculator"
        ],
        "summary": "Canonical-Tautomerization calculation.",
        "operationId": "calculateCanonicalTautomerization",
        "responses": {
          "400": {
            "description": "Un-parsable structure or other invalid value in the request.",
            "schema": {
              "$ref": "#/definitions/CanonicalTautomerResult"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StructureRequestCanonicalTautomerRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/rest-v1/calculator/calculate/tautomerization-dominant": {
      "post": {
        "tags": [
          "Calculator"
        ],
        "summary": "Dominant-Tautomerization calculation.",
        "operationId": "calculateDominantTautomerization",
        "responses": {
          "400": {
            "description": "Un-parsable structure or other invalid value in the request.",
            "schema": {
              "$ref": "#/definitions/DominantTautomerResult"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StructureRequestDominantTautomerRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/rest-v1/calculator/calculate/topology-analyser": {
      "post": {
        "tags": [
          "Calculator"
        ],
        "summary": "Topology analyser calculations.",
        "operationId": "calculateTopologyAnalyser",
        "responses": {
          "400": {
            "description": "Un-parsable structure or other invalid value in the request.",
            "schema": {
              "$ref": "#/definitions/TopologyAnalyserResult"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StructureRequestTopologyAnalyserRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    },
    "/rest-v1/chemical-term/evaluate": {
      "get": {
        "tags": [
          "Chemical-term evaluation"
        ],
        "summary": "Evaluates a chemical-term expression on a structure.",
        "operationId": "evaluate_1",
        "parameters": [
          {
            "name": "structure",
            "in": "query",
            "description": "the structure string. example: c1ccccc1CC(N)C",
            "required": true,
            "type": "string"
          },
          {
            "name": "expression",
            "in": "query",
            "description": "the chemical-term expression. example: mass() <= 200",
            "required": true,
            "type": "string"
          },
          {
            "name": "inputFormat",
            "in": "query",
            "description": "the input format and options",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Un-parsable structure or expression.",
            "schema": {
              "type": "string"
            }
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "tags": [
          "Chemical-term evaluation"
        ],
        "summary": "Evaluates a chemical-term expression on a structure.",
        "operationId": "evaluate",
        "responses": {
          "400": {
            "description": "Un-parsable structure or expression.",
            "schema": {
              "type": "string"
            }
          }
        },
        "parameters": [
          {
            "required": true,
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ChemTermRequest"
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ]
      }
    }
  },
  "swagger": "2.0",
  "host": "jchem-microservices.chemaxon.com",
  "schemes": [
    "https"
  ],
  "basePath": "/jws-calculations",
  "definitions": {
    "AggregatedCalculationsRequest": {
      "required": [
        "calculations",
        "structure"
      ],
      "type": "object",
      "properties": {
        "calculations": {
          "$ref": "#/definitions/CalculationRequests"
        },
        "inputFormat": {
          "type": "string",
          "description": "the input format and options",
          "example": "smiles"
        },
        "structure": {
          "type": "string",
          "description": "the molecule string",
          "example": "NC(CC1=CC=CC=C1)C(O)=O"
        }
      },
      "description": "Json structure that contains the structure and the needed calculations."
    },
    "AggregatedCalculationsResult": {
      "type": "object",
      "properties": {
        "charge": {
          "$ref": "#/definitions/OptionalResultChargeResult"
        },
        "cns-mpo": {
          "$ref": "#/definitions/OptionalResultCnsMpoResult"
        },
        "conformer": {
          "$ref": "#/definitions/OptionalResultListConformerResult"
        },
        "elemental-analysis": {
          "$ref": "#/definitions/OptionalResultElementalAnalyserResult"
        },
        "hbda": {
          "$ref": "#/definitions/OptionalResultHBDAResult"
        },
        "hlb": {
          "$ref": "#/definitions/OptionalResultHLBResult"
        },
        "isoelectric-point": {
          "$ref": "#/definitions/OptionalResultIsoelectricPointResult"
        },
        "logd": {
          "$ref": "#/definitions/OptionalResultLogDResult"
        },
        "logp": {
          "$ref": "#/definitions/OptionalResultLogPResult"
        },
        "major-microspecies": {
          "$ref": "#/definitions/OptionalResultMajorMicrospeciesResult"
        },
        "pka": {
          "$ref": "#/definitions/OptionalResultPKAResult"
        },
        "pka-distribution": {
          "$ref": "#/definitions/OptionalResultPKADistributionResult"
        },
        "polar-surface-area": {
          "$ref": "#/definitions/OptionalResultPolarSurfaceAreaResult"
        },
        "solubility": {
          "$ref": "#/definitions/OptionalResultSolubilityResult"
        },
        "stereoisomer": {
          "$ref": "#/definitions/OptionalResultStereoisomerResult"
        },
        "tautomerization-canonical": {
          "$ref": "#/definitions/OptionalResultCanonicalTautomerResult"
        },
        "tautomerization-dominant": {
          "$ref": "#/definitions/OptionalResultDominantTautomerResult"
        },
        "topology-analyser": {
          "$ref": "#/definitions/OptionalResultTopologyAnalyserResult"
        }
      }
    },
    "AtomEntryInteger": {
      "type": "object",
      "properties": {
        "atomIndex": {
          "type": "integer",
          "description": "Index of the atom.",
          "format": "int32"
        },
        "value": {
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "The size of smallest ring containing the specified atom"
    },
    "AtomNumberIsotopeCountTriplet": {
      "type": "object",
      "properties": {
        "atomNumber": {
          "type": "integer",
          "description": "the atom number",
          "format": "int32",
          "example": 6
        },
        "count": {
          "type": "integer",
          "description": "count of isotopes",
          "format": "int32"
        },
        "isotopeNumber": {
          "type": "integer",
          "description": "the isotope number",
          "format": "int32",
          "example": 12
        }
      },
      "description": "triplet with count"
    },
    "AtomNumberIsotopePair": {
      "type": "object",
      "properties": {
        "atomNumber": {
          "type": "integer",
          "description": "the atom number",
          "format": "int32",
          "example": 6
        },
        "isotopeNumber": {
          "type": "integer",
          "description": "the isotope number",
          "format": "int32",
          "example": 12
        }
      },
      "description": "Pairs an atom number with an isotope number",
      "example": [
        {
          "atomNumber": 6,
          "isotopeNumber": 12
        }
      ]
    },
    "BatchAggregatedCalculationsRequest": {
      "required": [
        "calculations"
      ],
      "type": "object",
      "properties": {
        "calculations": {
          "$ref": "#/definitions/CalculationRequests"
        },
        "inputFormat": {
          "type": "string",
          "description": "the input format and options",
          "example": "smiles"
        },
        "structures": {
          "type": "array",
          "description": "The list of molecule strings.",
          "example": [
            "C",
            "CC",
            "CCC"
          ],
          "items": {
            "type": "string",
            "description": "The list of molecule strings.",
            "example": "[\"C\",\"CC\",\"CCC\"]"
          }
        }
      },
      "description": "Json structure that contains the structure and the needed calculations.<br/>Note: 'structure' fields inside specific calculation request blocks are not necessary and will be ignored. Use the 'structures' list as your input of molecules."
    },
    "BatchAggregatedCalculationsResult": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AggregatedCalculationsResult"
          }
        }
      }
    },
    "BondDescriptorResult": {
      "type": "object",
      "properties": {
        "atomIndices": {
          "type": "array",
          "description": "The index of the atoms of bond in the molecule",
          "example": [
            2,
            3
          ],
          "items": {
            "type": "integer",
            "description": "The index of the atoms of bond in the molecule",
            "format": "int32"
          }
        },
        "bondIndex": {
          "type": "integer",
          "description": "The index of the bond in the molecule",
          "format": "int32",
          "example": 1
        }
      },
      "description": "Describes bonds in molecule"
    },
    "CalculationRequests": {
      "type": "object",
      "properties": {
        "charge": {
          "$ref": "#/definitions/ChargeRequest"
        },
        "cns-mpo": {
          "$ref": "#/definitions/CnsMpoRequest"
        },
        "conformer": {
          "$ref": "#/definitions/ConformerRequest"
        },
        "elemental-analysis": {
          "$ref": "#/definitions/ElementalAnalyserRequest"
        },
        "hbda": {
          "$ref": "#/definitions/HBDARequest"
        },
        "hlb": {
          "$ref": "#/definitions/HLBRequest"
        },
        "isoelectric-point": {
          "$ref": "#/definitions/IsoelectricPointRequest"
        },
        "logd": {
          "$ref": "#/definitions/LogDRequest"
        },
        "logp": {
          "$ref": "#/definitions/LogPRequest"
        },
        "major-microspecies": {
          "$ref": "#/definitions/MajorMicrospeciesRequest"
        },
        "pka": {
          "$ref": "#/definitions/PKARequest"
        },
        "pka-distribution": {
          "$ref": "#/definitions/PKADistributionRequest"
        },
        "polar-surface-area": {
          "$ref": "#/definitions/PolarSurfaceAreaRequest"
        },
        "solubility": {
          "$ref": "#/definitions/SolubilityRequest"
        },
        "stereoisomer": {
          "$ref": "#/definitions/StereoisomerRequest"
        },
        "tautomerization-canonical": {
          "$ref": "#/definitions/CanonicalTautomerRequest"
        },
        "tautomerization-dominant": {
          "$ref": "#/definitions/DominantTautomerRequest"
        },
        "topology-analyser": {
          "$ref": "#/definitions/TopologyAnalyserRequest"
        }
      }
    },
    "CanonicalTautomerRequest": {
      "required": [
        "resultMoleculeFormat"
      ],
      "type": "object",
      "properties": {
        "normalTautomerGenerationMode": {
          "type": "boolean",
          "description": "Rational tautomer generation narrows down the possible tautomerization paths and leads to chemically more feasible products. \nIt classifies isomers according to structural similarities: isomers in a group can convert into each other by simple low energy transformations, \nwhile transformation between the isomers of two different groups requires higher energy steps. \nDefault value is true ",
          "example": true
        },
        "resultMoleculeFormat": {
          "type": "string",
          "description": "Result molecule format. Default is MRV",
          "example": "MRV"
        }
      }
    },
    "CanonicalTautomerResult": {
      "type": "object",
      "properties": {
        "structure": {
          "type": "string",
          "description": "Result structure, in the requested format."
        }
      }
    },
    "ChargeRequest": {
      "type": "object",
      "properties": {
        "ph": {
          "type": "number",
          "description": "Sets the pH: major microspecies on given pH is taken as input molecule.\n            If set to java.lang.Double.NaN then the input molecule is taken as it is.\n            Default: Double.NaN",
          "format": "double",
          "example": 7.4
        }
      }
    },
    "ChargeResult": {
      "type": "object",
      "properties": {
        "formalCharge": {
          "type": "integer",
          "description": "The calculated formal charge of the molecule",
          "format": "int32"
        },
        "formalChargeByAtom": {
          "type": "array",
          "description": "List of formal charge values of the individual atoms",
          "items": {
            "$ref": "#/definitions/AtomEntryInteger"
          }
        },
        "totalChargeByAtom": {
          "type": "array",
          "description": "List of total charge values of the individual atoms",
          "items": {
            "$ref": "#/definitions/DoubleAtomEntry"
          }
        }
      }
    },
    "ChemTermRequest": {
      "required": [
        "chemterm",
        "structure"
      ],
      "type": "object",
      "properties": {
        "chemterm": {
          "type": "string",
          "description": "The chemical terms expression to evaluate.",
          "example": "mass()"
        },
        "inputFormat": {
          "type": "string",
          "description": "the input format and options",
          "example": "smiles"
        },
        "structure": {
          "type": "string",
          "description": "The chemical structure we apply the chemical terms expression on.",
          "example": "NC(CC1=CC=CC=C1)C(O)=O"
        }
      },
      "description": "Simple structure -- Chemical Terms pair. For more information about Chemical Terms, please visit documentation: https://docs.chemaxon.com/Functions_by_Categories"
    },
    "ClassProbability": {
      "type": "object",
      "properties": {
        "hergClass": {
          "type": "string"
        },
        "probability": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "CnsMpoRequest": {
      "type": "object"
    },
    "CnsMpoResult": {
      "type": "object",
      "properties": {
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Property"
          }
        },
        "score": {
          "type": "number",
          "description": "The calculated CNS MPO score.",
          "format": "double"
        }
      }
    },
    "ConformerRequest": {
      "type": "object",
      "properties": {
        "conformerCount": {
          "type": "integer",
          "description": "Maximum number of generated conformers",
          "format": "int32",
          "example": 5
        },
        "diversity": {
          "type": "number",
          "description": "Diversity",
          "format": "double",
          "example": 0.1
        },
        "outputFormat": {
          "type": "string",
          "description": "The output format and options. The default is mrv.",
          "example": "mrv"
        },
        "timeLimit": {
          "type": "integer",
          "description": "Time limit in seconds (0 is unlimited)",
          "format": "int32",
          "example": 900
        }
      }
    },
    "ConformerResult": {
      "type": "object",
      "properties": {
        "energy": {
          "type": "number",
          "description": "The calculated energy (kcal)",
          "format": "double"
        },
        "structure": {
          "type": "string",
          "description": "Result structure, in the requested format."
        }
      }
    },
    "DistributionElement": {
      "type": "object",
      "properties": {
        "P": {
          "type": "number",
          "description": "percentage (0-1)",
          "format": "double",
          "example": 1
        },
        "S": {
          "type": "string",
          "description": "structure in the requested format",
          "example": "CC(O)=CC(C)=O"
        }
      },
      "description": "Distribution of structures ordered by percentage descending."
    },
    "DominantTautomerRequest": {
      "required": [
        "resultMoleculeFormat"
      ],
      "type": "object",
      "properties": {
        "resultMoleculeFormat": {
          "type": "string",
          "description": "Result molecule format. Default is MRV",
          "example": "MRV"
        }
      }
    },
    "DominantTautomerResult": {
      "type": "object",
      "properties": {
        "structureDistribution": {
          "type": "array",
          "description": "Distribution of structures ordered by percentage descending.",
          "items": {
            "$ref": "#/definitions/DistributionElement"
          }
        }
      }
    },
    "DoubleAtomEntry": {
      "type": "object",
      "properties": {
        "atomIndex": {
          "type": "integer",
          "description": "Index of the atom.",
          "format": "int32"
        },
        "value": {
          "type": "number",
          "format": "double"
        }
      },
      "description": "The topological steric effect index (TSEI) of an atom from covalent radii values and topological distances. The stericEffectIndex is related to the steric hindrance of the given atom."
    },
    "DoublePhEntry": {
      "type": "object",
      "properties": {
        "pH": {
          "type": "number",
          "format": "double"
        },
        "value": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "ElementalAnalyserRequest": {
      "type": "object",
      "properties": {
        "countAtoms": {
          "type": "array",
          "description": "list all atom numbers that should be counted",
          "example": [
            1,
            6,
            8
          ],
          "items": {
            "type": "integer",
            "description": "list all atom numbers that should be counted",
            "format": "int32"
          }
        },
        "countIsotopes": {
          "type": "array",
          "description": "list all atom numbe - isotope pairs that should be counted",
          "example": [
            {
              "atomNumber": 6,
              "isotopeNumber": 12
            }
          ],
          "items": {
            "$ref": "#/definitions/AtomNumberIsotopePair"
          }
        },
        "operations": {
          "type": "string",
          "description": "Comma separated list of operations. null or empty means all operation. Available operations:\n* mass: average molecular mass calculated from the standard atomic weights,\n* exactMass: monoisotopic mass calculated from the weights of the most abundant natural isotopes of the elements,\n* formula: chemical formula of the molecule according to the Hill system,\n* formalChargeFormula: chemical formula of the molecule including the formal charge according to the Hill system,\n* isotopeFormula: chemical formula of the molecule listing isotopes separately according to the Hill system,\n* isotopeFormalChargeFormula: chemical formula of the molecule listing isotopes separately and including the formal charge according to the Hill system,\n* dotDisconnectedFormula:  chemical formula of the molecule(s) separating fragment formulas by dots (e.g. salts, counterions, solvent molecules etc. are present),\n* dotDisconnectedFormalChargeFormula:  chemical formula of the molecule(s) separating fragment formulas by dots and including the formal charge (e.g. salts, counterions, solvent molecules etc. are present),\n* dotDisconnectedIsotopeFormula: chemical formula of the molecule separating fragment formulas by dots and listing isotopes separately,\n* dotDisconnectedIsotopeFormalChargeFormula: chemical formula of the molecule separating fragment formulas by dots, listing isotopes separately and including the formal charge,\n* groupedDotDisconnectedFormula: the grouped dot-disconnected molecular formula of a multifragment molecule,\n* composition: elemental composition given in weight percentage (w/w %) calculated from the atomic masses,\n* isotopeComposition: elemental composition listing isotopes separately (w/w %),\n* isotopeDistribution: the isotopic distributions for the molecule (the distribution of fragments are merged, it takes charge into account),\n* allAtomCount: number of all atoms in the molecule,\n* countAtoms: number of the specified atom in the molecule,\n* countIsotopes: number of the specified isotope in the molecule.",
          "example": "mass, formula",
          "x-nullable": true
        },
        "symbolD": {
          "type": "boolean",
          "description": "deprecated, use symbolID instead",
          "x-deprecated": true
        },
        "symbolID": {
          "type": "boolean",
          "description": "If set to false, isotopes of hydrogen are displayed in formulas as 2H and 3H, if true, D and T symbols are used, default is true."
        }
      }
    },
    "ElementalAnalyserResult": {
      "type": "object",
      "properties": {
        "allAtomCount": {
          "type": "integer",
          "format": "int32"
        },
        "atomCounts": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "composition": {
          "type": "string"
        },
        "dotDisconnectedFormalChargeFormula": {
          "type": "string"
        },
        "dotDisconnectedFormula": {
          "type": "string"
        },
        "dotDisconnectedIsotopeFormalChargeFormula": {
          "type": "string"
        },
        "dotDisconnectedIsotopeFormula": {
          "type": "string"
        },
        "exactMass": {
          "type": "number",
          "description": "monoisotopic mass calculated from the weights of the most abundant natural isotopes of the elements",
          "format": "double"
        },
        "formalChargeFormula": {
          "type": "string"
        },
        "formula": {
          "type": "string",
          "description": "chemical formula of the molecule according to the Hill system",
          "example": "C7H5NaO2"
        },
        "groupedDotDisconnectedFormula": {
          "type": "string"
        },
        "isotopeComposition": {
          "type": "string"
        },
        "isotopeCount": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AtomNumberIsotopeCountTriplet"
          }
        },
        "isotopeDistribution": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "isotopeFormalChargeFormula": {
          "type": "string"
        },
        "isotopeFormula": {
          "type": "string"
        },
        "mass": {
          "type": "number",
          "description": "average molecular mass calculated from the standard atomic weights",
          "format": "double",
          "example": 149.135
        }
      }
    },
    "ErrorDescriptor": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "description": "Error"
    },
    "HBDARequest": {
      "type": "object",
      "properties": {
        "excludeHalogens": {
          "type": "boolean",
          "description": "If set to true (default), it excludes halogen atoms from acceptors",
          "example": true
        },
        "excludeSulfur": {
          "type": "boolean",
          "description": "If set to true (default), it excludes sulfur atoms from acceptors",
          "example": true
        },
        "outputFormat": {
          "type": "string",
          "description": "The output format and options. The default is mrv.",
          "example": "mrv"
        },
        "outputStructureIncluded": {
          "type": "boolean",
          "example": false
        },
        "pH": {
          "type": "number",
          "description": "Sets the pH: major microspecies on given pH is taken as input molecule\nif not set (default) then the input molecule is taken as it is.",
          "format": "double",
          "example": 7.4
        },
        "resultMoleculeFormat": {
          "type": "string",
          "description": "Deprecated. Use \"outputFormat\" instead",
          "example": "mrv",
          "x-deprecated": true
        },
        "resultMoleculeIncluded": {
          "type": "boolean",
          "description": "Deprecated. Use \"outputStructureIncluded\" instead.",
          "example": false,
          "x-deprecated": true
        }
      }
    },
    "HBDAResult": {
      "type": "object",
      "properties": {
        "acceptorAtomCount": {
          "type": "integer",
          "format": "int32"
        },
        "acceptorSiteCount": {
          "type": "integer",
          "format": "int32"
        },
        "acceptorSiteCountsByAtomIndex": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AtomEntryInteger"
          }
        },
        "donorAtomCount": {
          "type": "integer",
          "format": "int32"
        },
        "donorSiteCount": {
          "type": "integer",
          "format": "int32"
        },
        "donorSiteCountsByAtomIndex": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AtomEntryInteger"
          }
        },
        "structure": {
          "type": "string",
          "description": "Result structure, in the requested format."
        }
      }
    },
    "HLBRequest": {
      "type": "object"
    },
    "HLBResult": {
      "type": "object",
      "properties": {
        "cxnHlbValue": {
          "type": "number",
          "description": "A consensus HLB value indicating the lipophilicity and water solubility of the compound calculated with a method based on the other two with optimal weights.",
          "format": "double"
        },
        "daviesHlbValue": {
          "type": "number",
          "description": "HLB value indicating the lipophilicity and water solubility of the compound calculated with an extended version of the Davies method.",
          "format": "double"
        },
        "griffinHlbValue": {
          "type": "number",
          "description": "HLB value indicating the lipophilicity and water solubility of the compound calculated with an extended version of the Griffin method.",
          "format": "double"
        },
        "requiredHLBValue": {
          "type": "number",
          "description": "Experimental value, characteristic to the compound used in (O/W) emulsions.",
          "format": "double"
        }
      }
    },
    "HergActivityResult": {
      "type": "object",
      "properties": {
        "mostSimilars": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TrainingRecord"
          }
        },
        "pAct": {
          "type": "number",
          "format": "double"
        },
        "pActError": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "HergClassResult": {
      "type": "object",
      "properties": {
        "hergClass": {
          "type": "string"
        },
        "hergClassError": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mostSimilars": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TrainingRecord"
          }
        },
        "probabilities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClassProbability"
          }
        }
      }
    },
    "IsoelectricPointRequest": {
      "required": [
        "pHStep"
      ],
      "type": "object",
      "properties": {
        "pHStep": {
          "type": "number",
          "description": "  Isoelectric point plugin calculates gross charge distribution of a molecule as function of pH. \n                                                Net charge of an ionizable molecule is zero at a certain pH, this pH is called the isoelectric point. \n                                                It sets the pH step size of the calculation, default is 0.5\n                                                ",
          "format": "double",
          "example": 0.5
        }
      }
    },
    "IsoelectricPointResult": {
      "type": "object",
      "properties": {
        "chargeDistribution": {
          "type": "array",
          "description": "the charge distribution over pH values",
          "items": {
            "$ref": "#/definitions/DoublePhEntry"
          }
        },
        "isoelectricPoint": {
          "type": "number",
          "description": "the isoelectric point",
          "format": "double"
        }
      }
    },
    "LogDRequest": {
      "title": "LogDRequest",
      "type": "object",
      "properties": {
        "phList": {
          "type": "array",
          "description": "pH values for which logD values are calculated.\n\t\tDefault values: [1.5, 5.0, 6.5, 7.4]",
          "example": [
            1.5,
            5,
            6.5,
            7.4
          ],
          "items": {
            "type": "number",
            "description": "pH values for which logD values are calculated.\n\t\tDefault values: [1.5, 5.0, 6.5, 7.4]",
            "format": "double"
          }
        },
        "phSequence": {
          "$ref": "#/definitions/PhSequence"
        }
      },
      "description": "logD request"
    },
    "LogDResult": {
      "type": "object",
      "properties": {
        "logDByPh": {
          "type": "array",
          "description": "The calculated logD values at given pHs",
          "items": {
            "$ref": "#/definitions/DoublePhEntry"
          }
        }
      }
    },
    "LogPRequest": {
      "type": "object",
      "properties": {
        "atomIncrements": {
          "type": "boolean",
          "description": "Enable atomic logp increments calculation.",
          "example": true
        },
        "method": {
          "type": "string",
          "description": "Method for calculating logP (CHEMAXON or CONSENSUS). Default: CHEMAXON",
          "example": "CHEMAXON",
          "enum": [
            "CONSENSUS",
            "CHEMAXON",
            "USER_DEFINED",
            "CHEMAXON, CONSENSUS"
          ]
        }
      }
    },
    "LogPResult": {
      "type": "object",
      "properties": {
        "logP": {
          "type": "number",
          "description": "The logP value calculated",
          "format": "double"
        },
        "logPByAtom": {
          "type": "array",
          "description": "List of logP values of the individual atoms",
          "items": {
            "$ref": "#/definitions/DoubleAtomEntry"
          }
        }
      }
    },
    "MajorMicrospeciesRequest": {
      "required": [
        "resultMoleculeFormat"
      ],
      "type": "object",
      "properties": {
        "pH": {
          "type": "number",
          "description": "Sets the pH: major microspecies on given pH is taken as input molecule.\n\t\t\tDefault value: 7.4",
          "format": "double",
          "example": 7.4
        },
        "resultMoleculeFormat": {
          "type": "string",
          "description": "Result molecule format. Default is MRV",
          "example": "MRV"
        }
      }
    },
    "MajorMicrospeciesResult": {
      "type": "object",
      "properties": {
        "structure": {
          "type": "string",
          "description": "Result structure, in the requested format."
        }
      }
    },
    "OptionalResultCanonicalTautomerResult": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorDescriptor"
        },
        "structure": {
          "type": "string",
          "description": "Result structure, in the requested format."
        }
      }
    },
    "OptionalResultChargeResult": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorDescriptor"
        },
        "formalCharge": {
          "type": "integer",
          "description": "The calculated formal charge of the molecule",
          "format": "int32"
        },
        "formalChargeByAtom": {
          "type": "array",
          "description": "List of formal charge values of the individual atoms",
          "items": {
            "$ref": "#/definitions/AtomEntryInteger"
          }
        },
        "totalChargeByAtom": {
          "type": "array",
          "description": "List of total charge values of the individual atoms",
          "items": {
            "$ref": "#/definitions/DoubleAtomEntry"
          }
        }
      }
    },
    "OptionalResultCnsMpoResult": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorDescriptor"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Property"
          }
        },
        "score": {
          "type": "number",
          "description": "The calculated CNS MPO score.",
          "format": "double"
        }
      }
    },
    "OptionalResultDominantTautomerResult": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorDescriptor"
        },
        "structureDistribution": {
          "type": "array",
          "description": "Distribution of structures ordered by percentage descending.",
          "items": {
            "$ref": "#/definitions/DistributionElement"
          }
        }
      }
    },
    "OptionalResultElementalAnalyserResult": {
      "type": "object",
      "properties": {
        "allAtomCount": {
          "type": "integer",
          "format": "int32"
        },
        "atomCounts": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        },
        "composition": {
          "type": "string"
        },
        "dotDisconnectedFormalChargeFormula": {
          "type": "string"
        },
        "dotDisconnectedFormula": {
          "type": "string"
        },
        "dotDisconnectedIsotopeFormalChargeFormula": {
          "type": "string"
        },
        "dotDisconnectedIsotopeFormula": {
          "type": "string"
        },
        "error": {
          "$ref": "#/definitions/ErrorDescriptor"
        },
        "exactMass": {
          "type": "number",
          "description": "monoisotopic mass calculated from the weights of the most abundant natural isotopes of the elements",
          "format": "double"
        },
        "formalChargeFormula": {
          "type": "string"
        },
        "formula": {
          "type": "string",
          "description": "chemical formula of the molecule according to the Hill system",
          "example": "C7H5NaO2"
        },
        "groupedDotDisconnectedFormula": {
          "type": "string"
        },
        "isotopeComposition": {
          "type": "string"
        },
        "isotopeCount": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AtomNumberIsotopeCountTriplet"
          }
        },
        "isotopeDistribution": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "isotopeFormalChargeFormula": {
          "type": "string"
        },
        "isotopeFormula": {
          "type": "string"
        },
        "mass": {
          "type": "number",
          "description": "average molecular mass calculated from the standard atomic weights",
          "format": "double",
          "example": 149.135
        }
      }
    },
    "OptionalResultHBDAResult": {
      "type": "object",
      "properties": {
        "acceptorAtomCount": {
          "type": "integer",
          "format": "int32"
        },
        "acceptorSiteCount": {
          "type": "integer",
          "format": "int32"
        },
        "acceptorSiteCountsByAtomIndex": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AtomEntryInteger"
          }
        },
        "donorAtomCount": {
          "type": "integer",
          "format": "int32"
        },
        "donorSiteCount": {
          "type": "integer",
          "format": "int32"
        },
        "donorSiteCountsByAtomIndex": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AtomEntryInteger"
          }
        },
        "error": {
          "$ref": "#/definitions/ErrorDescriptor"
        },
        "structure": {
          "type": "string",
          "description": "Result structure, in the requested format."
        }
      }
    },
    "OptionalResultHLBResult": {
      "type": "object",
      "properties": {
        "cxnHlbValue": {
          "type": "number",
          "description": "A consensus HLB value indicating the lipophilicity and water solubility of the compound calculated with a method based on the other two with optimal weights.",
          "format": "double"
        },
        "daviesHlbValue": {
          "type": "number",
          "description": "HLB value indicating the lipophilicity and water solubility of the compound calculated with an extended version of the Davies method.",
          "format": "double"
        },
        "error": {
          "$ref": "#/definitions/ErrorDescriptor"
        },
        "griffinHlbValue": {
          "type": "number",
          "description": "HLB value indicating the lipophilicity and water solubility of the compound calculated with an extended version of the Griffin method.",
          "format": "double"
        },
        "requiredHLBValue": {
          "type": "number",
          "description": "Experimental value, characteristic to the compound used in (O/W) emulsions.",
          "format": "double"
        }
      }
    },
    "OptionalResultIsoelectricPointResult": {
      "type": "object",
      "properties": {
        "chargeDistribution": {
          "type": "array",
          "description": "the charge distribution over pH values",
          "items": {
            "$ref": "#/definitions/DoublePhEntry"
          }
        },
        "error": {
          "$ref": "#/definitions/ErrorDescriptor"
        },
        "isoelectricPoint": {
          "type": "number",
          "description": "the isoelectric point",
          "format": "double"
        }
      }
    },
    "OptionalResultListConformerResult": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorDescriptor"
        }
      }
    },
    "OptionalResultLogDResult": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorDescriptor"
        },
        "logDByPh": {
          "type": "array",
          "description": "The calculated logD values at given pHs",
          "items": {
            "$ref": "#/definitions/DoublePhEntry"
          }
        }
      }
    },
    "OptionalResultLogPResult": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorDescriptor"
        },
        "logP": {
          "type": "number",
          "description": "The logP value calculated",
          "format": "double"
        },
        "logPByAtom": {
          "type": "array",
          "description": "List of logP values of the individual atoms",
          "items": {
            "$ref": "#/definitions/DoubleAtomEntry"
          }
        }
      }
    },
    "OptionalResultMajorMicrospeciesResult": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorDescriptor"
        },
        "structure": {
          "type": "string",
          "description": "Result structure, in the requested format."
        }
      }
    },
    "OptionalResultPKADistributionResult": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorDescriptor"
        },
        "structureDistributionsByPh": {
          "type": "array",
          "description": "structure distributions by pH values",
          "items": {
            "$ref": "#/definitions/StructureDistributionByPh"
          }
        },
        "structures": {
          "type": "array",
          "description": "result microspecies structures in the requested format",
          "example": "CC(O)=CC(C)=O",
          "items": {
            "type": "string",
            "description": "result microspecies structures in the requested format",
            "example": "CC(O)=CC(C)=O"
          }
        }
      }
    },
    "OptionalResultPKAResult": {
      "type": "object",
      "properties": {
        "acidicValuesByAtom": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DoubleAtomEntry"
          }
        },
        "basicValuesByAtom": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DoubleAtomEntry"
          }
        },
        "error": {
          "$ref": "#/definitions/ErrorDescriptor"
        },
        "maxBasicValue": {
          "type": "number",
          "format": "double"
        },
        "minAcidicValue": {
          "type": "number",
          "format": "double"
        },
        "pkaValuesByAtom": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DoubleAtomEntry"
          }
        },
        "structure": {
          "type": "string",
          "description": "Result structure, in the requested format."
        }
      }
    },
    "OptionalResultPolarSurfaceAreaResult": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorDescriptor"
        },
        "polarSurfaceArea": {
          "type": "number",
          "format": "double"
        },
        "structure": {
          "type": "string",
          "description": "Result structure, in the requested format."
        },
        "unit": {
          "type": "string"
        }
      }
    },
    "OptionalResultSolubilityResult": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorDescriptor"
        },
        "intrinsicSolubility": {
          "type": "number",
          "description": "the solubility that can be measured after the equilibrium of solution between the dissolved and the solid state is reached\n        at a pH where the compound is fully neutral",
          "format": "double"
        },
        "phDependentSolubilities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DoublePhEntry"
          }
        },
        "unit": {
          "type": "string"
        }
      }
    },
    "OptionalResultStereoisomerResult": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorDescriptor"
        },
        "molecules": {
          "type": "array",
          "description": "Result molecules in the requested format.",
          "items": {
            "type": "string",
            "description": "Result molecules in the requested format."
          }
        }
      }
    },
    "OptionalResultTopologyAnalyserResult": {
      "type": "object",
      "properties": {
        "aliphaticAtomCount": {
          "type": "integer",
          "description": "The aliphatic atom count in the structure",
          "format": "int32"
        },
        "aliphaticBondCount": {
          "type": "integer",
          "description": "The aliphatic bond count of the structure",
          "format": "int32"
        },
        "aliphaticRingCount": {
          "type": "integer",
          "description": "The aliphatic ring count of the structure",
          "format": "int32"
        },
        "aliphaticRings": {
          "type": "array",
          "description": "Aliphatic rings of the structure",
          "items": {
            "type": "array",
            "description": "Aliphatic rings of the structure",
            "items": {
              "type": "integer",
              "description": "Aliphatic rings of the structure",
              "format": "int32"
            }
          }
        },
        "allAtomCount": {
          "type": "integer",
          "description": "The atom count",
          "format": "int32"
        },
        "aromaticAtomCount": {
          "type": "integer",
          "description": "The aromatic atom count in the structure",
          "format": "int32"
        },
        "aromaticBondCount": {
          "type": "integer",
          "description": "The aromatic bond count of the structure",
          "format": "int32"
        },
        "aromaticRingCount": {
          "type": "integer",
          "description": "The aromatic ring count of the structure",
          "format": "int32"
        },
        "aromaticRings": {
          "type": "array",
          "description": "Aromatic rings of the structure",
          "items": {
            "type": "array",
            "description": "Aromatic rings of the structure",
            "items": {
              "type": "integer",
              "description": "Aromatic rings of the structure",
              "format": "int32"
            }
          }
        },
        "asymmmetricAtoms": {
          "type": "array",
          "description": "The asymmetric atoms of the structure",
          "items": {
            "type": "integer",
            "description": "The asymmetric atoms of the structure",
            "format": "int32"
          }
        },
        "balabanIndex": {
          "type": "number",
          "description": "The Balaban distance connectivity of the structure, which is the average distance sum connectivity",
          "format": "double"
        },
        "bondCount": {
          "type": "integer",
          "description": "The number of bonds",
          "format": "int32"
        },
        "carboAliphaticRingCount": {
          "type": "integer",
          "description": "The number of aliphatic rings containing only carbon atoms",
          "format": "int32"
        },
        "carboAromaticRingCount": {
          "type": "integer",
          "description": "The number of aromatic rings containing only carbon atoms",
          "format": "int32"
        },
        "carboRingCount": {
          "type": "integer",
          "description": "The number of rings containing only carbon atoms",
          "format": "int32"
        },
        "carboRings": {
          "type": "array",
          "description": "Carbocyclic rings in the structure (rings containing carbon  atoms only)",
          "items": {
            "type": "array",
            "description": "Carbocyclic rings in the structure (rings containing carbon  atoms only)",
            "items": {
              "type": "integer",
              "description": "Carbocyclic rings in the structure (rings containing carbon  atoms only)",
              "format": "int32"
            }
          }
        },
        "chainAtomCount": {
          "type": "integer",
          "description": "The chain atom count",
          "format": "int32"
        },
        "chainBondCount": {
          "type": "integer",
          "description": "The chain bond count",
          "format": "int32"
        },
        "chiralCenterCount": {
          "type": "integer",
          "description": "The number of tetrahedral stereogenic centers",
          "format": "int32"
        },
        "chiralCenters": {
          "type": "array",
          "description": "Indexes of chiral center atoms",
          "items": {
            "type": "integer",
            "description": "Indexes of chiral center atoms",
            "format": "int32"
          }
        },
        "coloredLargestConjugatedSystem": {
          "type": "string",
          "description": "The structure in which the atoms of largest conjugated system are colored"
        },
        "cyclomaticNumber": {
          "type": "integer",
          "description": "The smallest number of graph edges which must be removed such that no circuit remains. Also known as circuit rank.",
          "format": "int32"
        },
        "distanceDegree": {
          "type": "array",
          "description": "Sum of the corresponding row values in the structure's atom-distance matrix",
          "items": {
            "$ref": "#/definitions/AtomEntryInteger"
          }
        },
        "eccentricity": {
          "type": "array",
          "description": "Greatest value of the corresponding row values in the structure's atom-distance matrix",
          "items": {
            "$ref": "#/definitions/AtomEntryInteger"
          }
        },
        "error": {
          "$ref": "#/definitions/ErrorDescriptor"
        },
        "fragmentCount": {
          "type": "integer",
          "description": "The number of fragments (disconnected parts) of the structure",
          "format": "int32"
        },
        "fsp3": {
          "type": "number",
          "description": "The Fsp3 value of the given structure. Fsp3 = number of sp3 carbons / number of carbons",
          "format": "double"
        },
        "fusedAliphaticRingCount": {
          "type": "integer",
          "description": "The fused aliphatic ring count of the structure",
          "format": "int32"
        },
        "fusedAliphaticRings": {
          "type": "array",
          "description": "Atom indexes of the fused aliphatic rings in the structure",
          "items": {
            "type": "array",
            "description": "Atom indexes of the fused aliphatic rings in the structure",
            "items": {
              "type": "integer",
              "description": "Atom indexes of the fused aliphatic rings in the structure",
              "format": "int32"
            }
          }
        },
        "fusedAromaticRingCount": {
          "type": "integer",
          "description": "The fused aromatic ring count of the structure",
          "format": "int32"
        },
        "fusedAromaticRings": {
          "type": "array",
          "description": "Atom indexes of the fused aromatic rings in the structure",
          "items": {
            "type": "array",
            "description": "Atom indexes of the fused aromatic rings in the structure",
            "items": {
              "type": "integer",
              "description": "Atom indexes of the fused aromatic rings in the structure",
              "format": "int32"
            }
          }
        },
        "fusedRingCount": {
          "type": "integer",
          "description": "The number of fused rings (SSSR smallest set of smallest rings) in the structure",
          "format": "int32"
        },
        "hararyIndex": {
          "type": "number",
          "description": "The Harary index which is the half-sum of the off-diagonal elements of the reciprocal molecular distance matrix of the structure",
          "format": "double"
        },
        "heteroAliphaticRingCount": {
          "type": "integer",
          "description": "The aliphatic heterocyclic ring count of the structure",
          "format": "int32"
        },
        "heteroAliphaticRings": {
          "type": "array",
          "description": "Atom indexes of the heteroaliphatic rings in the structure (aliphatic rings containing at least a non-carbon atom)",
          "items": {
            "type": "array",
            "description": "Atom indexes of the heteroaliphatic rings in the structure (aliphatic rings containing at least a non-carbon atom)",
            "items": {
              "type": "integer",
              "description": "Atom indexes of the heteroaliphatic rings in the structure (aliphatic rings containing at least a non-carbon atom)",
              "format": "int32"
            }
          }
        },
        "heteroAromaticRingCount": {
          "type": "integer",
          "description": "The aromatic heterocyclic ring count of the structure",
          "format": "int32"
        },
        "heteroAromaticRings": {
          "type": "array",
          "description": "Atom indexes of the heteroaromatic rings in the structure (aromatic rings containing at least a non-carbon atom)",
          "items": {
            "type": "array",
            "description": "Atom indexes of the heteroaromatic rings in the structure (aromatic rings containing at least a non-carbon atom)",
            "items": {
              "type": "integer",
              "description": "Atom indexes of the heteroaromatic rings in the structure (aromatic rings containing at least a non-carbon atom)",
              "format": "int32"
            }
          }
        },
        "heteroRingCount": {
          "type": "integer",
          "description": "The number of heterocyclic rings in the structure (rings containing at least a non-carbon atom)",
          "format": "int32"
        },
        "heteroRings": {
          "type": "array",
          "description": "Atom indexes of the heterocyclic rings in the structure",
          "items": {
            "type": "array",
            "description": "Atom indexes of the heterocyclic rings in the structure",
            "items": {
              "type": "integer",
              "description": "Atom indexes of the heterocyclic rings in the structure",
              "format": "int32"
            }
          }
        },
        "hyperWienerIndex": {
          "type": "integer",
          "description": "The hyper Wiener index of the structure",
          "format": "int32"
        },
        "isConnectedGraph": {
          "type": "boolean",
          "description": "Determines if the structure is a connected graph or not (if there is a path from any node to any other node in the graph)"
        },
        "largestConjugatedSystem": {
          "type": "array",
          "description": "Atom indexes of the largest conjugated system in the structure",
          "items": {
            "type": "integer",
            "description": "Atom indexes of the largest conjugated system in the structure",
            "format": "int32"
          }
        },
        "largestConjugatedSystemSize": {
          "type": "integer",
          "description": "The largest conjugated system size (number of pi electron pairs)",
          "format": "int32"
        },
        "largestRing": {
          "type": "array",
          "description": "Atom indexes of the largest ring in the structure",
          "items": {
            "type": "integer",
            "description": "Atom indexes of the largest ring in the structure",
            "format": "int32"
          }
        },
        "largestRingSize": {
          "type": "integer",
          "description": "The largest ring size",
          "format": "int32"
        },
        "largestRingSizeOfAtom": {
          "type": "array",
          "description": "The size of largest ring containing the specified atom",
          "items": {
            "$ref": "#/definitions/AtomEntryInteger"
          }
        },
        "largestRingSystem": {
          "type": "array",
          "description": "The largest ring system in the structure",
          "items": {
            "type": "integer",
            "description": "The largest ring system in the structure",
            "format": "int32"
          }
        },
        "largestRingSystemSize": {
          "type": "integer",
          "description": "The size of the largest ring system (number of rings) in the molecule (0 when acylcic)",
          "format": "int32"
        },
        "plattIndex": {
          "type": "integer",
          "description": "The Platt index of the molecule which is equal to the total sum of the edge degrees of a molecular graph",
          "format": "int32"
        },
        "possibleCTBondCount": {
          "type": "integer",
          "description": "The number of double bonds in molecule which can be CIS / TRANS bonds.",
          "format": "int32"
        },
        "possibleCTBonds": {
          "type": "array",
          "description": "The double bonds in molecule which can be CIS / TRANS bonds.",
          "items": {
            "$ref": "#/definitions/BondDescriptorResult"
          }
        },
        "randicIndex": {
          "type": "number",
          "description": "The Randic index or molecular connectivity index as the harmonic sum of the geometric means of the node degrees for each edge",
          "format": "double"
        },
        "ringAtomCount": {
          "type": "integer",
          "description": "The number of ring atoms",
          "format": "int32"
        },
        "ringBondCount": {
          "type": "integer",
          "description": "The number of ring bonds",
          "format": "int32"
        },
        "ringCount": {
          "type": "integer",
          "description": "The number of rings",
          "format": "int32"
        },
        "ringCountOfAtom": {
          "type": "array",
          "description": "The number of rings (SSSR smallest set of smallest rings) an atom is part of",
          "items": {
            "$ref": "#/definitions/AtomEntryInteger"
          }
        },
        "ringSystemCount": {
          "type": "integer",
          "description": "The number of ring systems (fused and spiro rings belong to to one ring system)",
          "format": "int32"
        },
        "ringSystems": {
          "type": "array",
          "description": "The ring systems in the structure, fused and spiro rings belong to one ring system",
          "items": {
            "type": "array",
            "description": "The ring systems in the structure, fused and spiro rings belong to one ring system",
            "items": {
              "type": "integer",
              "description": "The ring systems in the structure, fused and spiro rings belong to one ring system",
              "format": "int32"
            }
          }
        },
        "rings": {
          "type": "array",
          "description": "Atom indexes of the rings in the structure",
          "items": {
            "type": "array",
            "description": "Atom indexes of the rings in the structure",
            "items": {
              "type": "integer",
              "description": "Atom indexes of the rings in the structure",
              "format": "int32"
            }
          }
        },
        "rotatableBondCount": {
          "type": "integer",
          "description": "The rotatable bond count",
          "format": "int32"
        },
        "smallestRing": {
          "type": "array",
          "description": "Atom indexes of the smallest ring in the structure",
          "items": {
            "type": "integer",
            "description": "Atom indexes of the smallest ring in the structure",
            "format": "int32"
          }
        },
        "smallestRingSize": {
          "type": "integer",
          "description": "The smallest ring size",
          "format": "int32"
        },
        "smallestRingSizeOfAtom": {
          "type": "array",
          "description": "The size of smallest ring containing the specified atom",
          "items": {
            "$ref": "#/definitions/AtomEntryInteger"
          }
        },
        "smallestRingSystem": {
          "type": "array",
          "description": "The smallest ring system in the structure",
          "items": {
            "type": "integer",
            "description": "The smallest ring system in the structure",
            "format": "int32"
          }
        },
        "smallestRingSystemSize": {
          "type": "integer",
          "description": "The size of the smallest ring system (number of rings) in the molecule (0 when acylcic)",
          "format": "int32"
        },
        "stereoDoubleBondCount": {
          "type": "integer",
          "description": "The number of stereo double bonds",
          "format": "int32"
        },
        "stericEffect": {
          "type": "array",
          "description": "The topological steric effect index (TSEI) of an atom from covalent radii values and topological distances. The stericEffectIndex is related to the steric hindrance of the given atom.",
          "items": {
            "$ref": "#/definitions/DoubleAtomEntry"
          }
        },
        "szegedIndex": {
          "type": "integer",
          "description": "The Szeged index of the molecule (the Szeged index is based on the Wiener number,\n                                    which is calculated by simply counting the number of nodes on both sides of each edge (and sum these counts),\n                                    the Szeged Index extends the Wiener number for cyclic graphs by counting those nodes only\n                                    which are nearer to the given side of the edge than to the other,\n                                    unreachable nodes (disconnected graphs) or those at equidistance position to both sides of the given edge\n                                    are not taken into account)",
          "format": "int32"
        },
        "wienerIndex": {
          "type": "integer",
          "description": "The Wiener index of the molecule, which is the average topological atom distance (half of the sum of all atom distances) in the molecule.",
          "format": "int32"
        },
        "wienerPolarity": {
          "type": "integer",
          "description": "The Wiener polarity number of the molecule, which is the number of 3 bond length distances in the molecule.",
          "format": "int32"
        }
      }
    },
    "PKADistributionRequest": {
      "required": [
        "resultMoleculeFormat"
      ],
      "type": "object",
      "properties": {
        "considerTautomerization": {
          "type": "boolean",
          "example": true
        },
        "pKaLowerLimit": {
          "type": "number",
          "format": "double",
          "example": -20
        },
        "pKaUpperLimit": {
          "type": "number",
          "format": "double",
          "example": 10
        },
        "phSequence": {
          "$ref": "#/definitions/PhSequence"
        },
        "resultMoleculeFormat": {
          "type": "string",
          "description": "Result molecule format. Default is MRV",
          "example": "MRV"
        },
        "temperature": {
          "type": "number",
          "format": "double",
          "example": 298
        }
      }
    },
    "PKADistributionResult": {
      "type": "object",
      "properties": {
        "structureDistributionsByPh": {
          "type": "array",
          "description": "structure distributions by pH values",
          "items": {
            "$ref": "#/definitions/StructureDistributionByPh"
          }
        },
        "structures": {
          "type": "array",
          "description": "result microspecies structures in the requested format",
          "example": "CC(O)=CC(C)=O",
          "items": {
            "type": "string",
            "description": "result microspecies structures in the requested format",
            "example": "CC(O)=CC(C)=O"
          }
        }
      }
    },
    "PKARequest": {
      "required": [
        "types"
      ],
      "type": "object",
      "properties": {
        "micro": {
          "type": "boolean",
          "description": "Sets micro pKa calculation. Default: <code>false</code> (macro pKa calculation).",
          "example": false
        },
        "outputFormat": {
          "type": "string",
          "description": "The output format and options. The default is mrv.",
          "example": "mrv"
        },
        "outputStructureIncluded": {
          "type": "boolean",
          "example": false
        },
        "pKaLowerLimit": {
          "type": "number",
          "format": "double",
          "example": -20
        },
        "pKaUpperLimit": {
          "type": "number",
          "format": "double",
          "example": 10
        },
        "prefix": {
          "type": "string",
          "example": "DYNAMIC",
          "enum": [
            "STATIC",
            "DYNAMIC"
          ]
        },
        "resultMoleculeFormat": {
          "type": "string",
          "description": "Deprecated. Use \"outputFormat\" instead",
          "example": "mrv",
          "x-deprecated": true
        },
        "resultMoleculeIncluded": {
          "type": "boolean",
          "description": "Deprecated. Use \"outputStructureIncluded\" instead.",
          "example": false,
          "x-deprecated": true
        },
        "temperature": {
          "type": "number",
          "format": "double",
          "example": 298
        },
        "types": {
          "type": "string",
          "example": "pKa, acidic, basic"
        }
      }
    },
    "PKAResult": {
      "type": "object",
      "properties": {
        "acidicValuesByAtom": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DoubleAtomEntry"
          }
        },
        "basicValuesByAtom": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DoubleAtomEntry"
          }
        },
        "maxBasicValue": {
          "type": "number",
          "format": "double"
        },
        "minAcidicValue": {
          "type": "number",
          "format": "double"
        },
        "pkaValuesByAtom": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DoubleAtomEntry"
          }
        },
        "structure": {
          "type": "string",
          "description": "Result structure, in the requested format."
        }
      }
    },
    "PartialElementalAnalysisResult": {
      "type": "object",
      "properties": {
        "atomCount": {
          "type": "integer",
          "format": "int32"
        },
        "charge": {
          "type": "integer",
          "format": "int32"
        },
        "exactMass": {
          "type": "number",
          "format": "double"
        },
        "formula": {
          "type": "string"
        },
        "mass": {
          "type": "number",
          "format": "double"
        },
        "radical": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PhSequence": {
      "type": "object",
      "properties": {
        "pHLower": {
          "type": "number",
          "format": "double",
          "example": 1.5
        },
        "pHStep": {
          "type": "number",
          "format": "double",
          "example": 0.1
        },
        "pHUpper": {
          "type": "number",
          "format": "double",
          "example": 7.4
        }
      }
    },
    "PolarSurfaceAreaRequest": {
      "type": "object",
      "properties": {
        "excludePhosphorus": {
          "type": "boolean",
          "description": "If set to true (default), it excludes phosphorus atoms from calculation",
          "example": true
        },
        "excludeSulfur": {
          "type": "boolean",
          "description": "If set to true (default), it excludes sulfur atoms from calculation",
          "example": true
        },
        "outputFormat": {
          "type": "string",
          "description": "The output format and options. The default is mrv.",
          "example": "mrv"
        },
        "outputStructureIncluded": {
          "type": "boolean",
          "example": false
        },
        "pH": {
          "type": "number",
          "description": "Sets the pH: major microspecies on given pH is taken as input molecule \nif set to null (default) then the input molecule is taken as it is.",
          "format": "double",
          "example": 7.4
        },
        "resultMoleculeFormat": {
          "type": "string",
          "description": "Deprecated. Use \"outputFormat\" instead",
          "example": "mrv",
          "x-deprecated": true
        },
        "resultMoleculeIncluded": {
          "type": "boolean",
          "description": "Deprecated. Use \"outputStructureIncluded\" instead.",
          "example": false,
          "x-deprecated": true
        }
      },
      "description": "Polar surface area (PSA) is formed by the polar atoms of the molecule.\n                            It is a descriptor that shows good correlation with passive molecular transport through membranes. \n                            The TPSA value can be calculated both for the neutral form and the major microspecies. "
    },
    "PolarSurfaceAreaResult": {
      "type": "object",
      "properties": {
        "polarSurfaceArea": {
          "type": "number",
          "format": "double"
        },
        "structure": {
          "type": "string",
          "description": "Result structure, in the requested format."
        },
        "unit": {
          "type": "string"
        }
      }
    },
    "Property": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "score": {
          "type": "number",
          "format": "double"
        },
        "value": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "SolubilityRequest": {
      "type": "object",
      "properties": {
        "phSequence": {
          "$ref": "#/definitions/PhSequence"
        },
        "unit": {
          "type": "string",
          "description": "Unit to express solubility (default is milliMolar)",
          "example": "MM",
          "enum": [
            "nM",
            "uM",
            "mM",
            "mg/ml",
            "mol/l",
            "logS",
            "NM, UM, MM, LOGS, MGPERML, MOLPERL"
          ]
        }
      }
    },
    "SolubilityResult": {
      "type": "object",
      "properties": {
        "intrinsicSolubility": {
          "type": "number",
          "description": "the solubility that can be measured after the equilibrium of solution between the dissolved and the solid state is reached\n        at a pH where the compound is fully neutral",
          "format": "double"
        },
        "phDependentSolubilities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DoublePhEntry"
          }
        },
        "unit": {
          "type": "string"
        }
      }
    },
    "StereoisomerRequest": {
      "required": [
        "resultMoleculeFormat"
      ],
      "type": "object",
      "properties": {
        "maxStereoisomerCount": {
          "type": "integer",
          "description": "[OPTIONAL] The maximum number of stereoisomers to be generated.",
          "format": "int32",
          "example": 1000
        },
        "outputIn3d": {
          "type": "boolean",
          "description": "3D structures are generated (invalid 3D structure are filtered). Default is false.",
          "example": false
        },
        "protectDoubleBondStereo": {
          "type": "boolean",
          "description": "If <code>true</code> then the stereo configuration of double bonds with preset stereo information \n                                                will not be changed. Default is false.",
          "example": false
        },
        "protectTetrahedralStereo": {
          "type": "boolean",
          "description": "If <code>true</code> then stereo configuration of tetrahedral stereo centers with preset stereo information \n                                                will not be changed.Default is false.",
          "example": false
        },
        "resultMoleculeFormat": {
          "type": "string",
          "description": "Result molecule format. Default is MRV",
          "example": "MRV"
        },
        "type": {
          "type": "string",
          "description": "Sets which types of stereoisomers should be generated. Default is TETRAHEDRAL.",
          "example": "TETRAHEDRAL",
          "enum": [
            "TETRAHEDRAL",
            "DOUBLE_BOND",
            "BOTH"
          ]
        },
        "verify3d": {
          "type": "boolean",
          "description": "Invalid 3D structures of generated stereoisomers are filtered. Default is false.",
          "example": false
        }
      }
    },
    "StereoisomerResult": {
      "type": "object",
      "properties": {
        "molecules": {
          "type": "array",
          "description": "Result molecules in the requested format.",
          "items": {
            "type": "string",
            "description": "Result molecules in the requested format."
          }
        }
      }
    },
    "StructureDistributionByPh": {
      "type": "object",
      "properties": {
        "pH": {
          "type": "number",
          "format": "double"
        },
        "percentages": {
          "type": "array",
          "description": "percentages(0-1) are corresponding to result microspecies structures in same ordering.",
          "items": {
            "type": "number",
            "description": "percentages(0-1) are corresponding to result microspecies structures in same ordering.",
            "format": "double"
          }
        }
      },
      "description": "structure distributions by pH values"
    },
    "StructureRequestCanonicalTautomerRequest": {
      "required": [
        "resultMoleculeFormat",
        "structure"
      ],
      "type": "object",
      "properties": {
        "inputFormat": {
          "type": "string",
          "description": "the input format and options",
          "example": "smiles"
        },
        "normalTautomerGenerationMode": {
          "type": "boolean",
          "description": "Rational tautomer generation narrows down the possible tautomerization paths and leads to chemically more feasible products. \nIt classifies isomers according to structural similarities: isomers in a group can convert into each other by simple low energy transformations, \nwhile transformation between the isomers of two different groups requires higher energy steps. \nDefault value is true ",
          "example": true
        },
        "resultMoleculeFormat": {
          "type": "string",
          "description": "Result molecule format. Default is MRV",
          "example": "MRV"
        },
        "structure": {
          "type": "string",
          "description": "the molecule string",
          "example": "NC(CC1=CC=CC=C1)C(O)=O"
        }
      },
      "description": "Json structure that contains the structure and the needed parameters."
    },
    "StructureRequestChargeRequest": {
      "required": [
        "structure"
      ],
      "type": "object",
      "properties": {
        "inputFormat": {
          "type": "string",
          "description": "the input format and options",
          "example": "smiles"
        },
        "ph": {
          "type": "number",
          "description": "Sets the pH: major microspecies on given pH is taken as input molecule.\n            If set to java.lang.Double.NaN then the input molecule is taken as it is.\n            Default: Double.NaN",
          "format": "double",
          "example": 7.4
        },
        "structure": {
          "type": "string",
          "description": "the molecule string",
          "example": "NC(CC1=CC=CC=C1)C(O)=O"
        }
      },
      "description": "Json structure that contains the structure and the needed parameters."
    },
    "StructureRequestCnsMpoRequest": {
      "required": [
        "structure"
      ],
      "type": "object",
      "properties": {
        "inputFormat": {
          "type": "string",
          "description": "the input format and options",
          "example": "smiles"
        },
        "structure": {
          "type": "string",
          "description": "the molecule string",
          "example": "NC(CC1=CC=CC=C1)C(O)=O"
        }
      },
      "description": "Json structure that contains the structure and the needed parameters."
    },
    "StructureRequestConformerRequest": {
      "required": [
        "structure"
      ],
      "type": "object",
      "properties": {
        "conformerCount": {
          "type": "integer",
          "description": "Maximum number of generated conformers",
          "format": "int32",
          "example": 5
        },
        "diversity": {
          "type": "number",
          "description": "Diversity",
          "format": "double",
          "example": 0.1
        },
        "inputFormat": {
          "type": "string",
          "description": "the input format and options",
          "example": "smiles"
        },
        "outputFormat": {
          "type": "string",
          "description": "The output format and options. The default is mrv.",
          "example": "mrv"
        },
        "structure": {
          "type": "string",
          "description": "the molecule string",
          "example": "NC(CC1=CC=CC=C1)C(O)=O"
        },
        "timeLimit": {
          "type": "integer",
          "description": "Time limit in seconds (0 is unlimited)",
          "format": "int32",
          "example": 900
        }
      },
      "description": "Json structure that contains the structure and the needed parameters."
    },
    "StructureRequestDominantTautomerRequest": {
      "required": [
        "resultMoleculeFormat",
        "structure"
      ],
      "type": "object",
      "properties": {
        "inputFormat": {
          "type": "string",
          "description": "the input format and options",
          "example": "smiles"
        },
        "resultMoleculeFormat": {
          "type": "string",
          "description": "Result molecule format. Default is MRV",
          "example": "MRV"
        },
        "structure": {
          "type": "string",
          "description": "the molecule string",
          "example": "NC(CC1=CC=CC=C1)C(O)=O"
        }
      },
      "description": "Json structure that contains the structure and the needed parameters."
    },
    "StructureRequestElementalAnalyserRequest": {
      "required": [
        "structure"
      ],
      "type": "object",
      "properties": {
        "countAtoms": {
          "type": "array",
          "description": "list all atom numbers that should be counted",
          "example": [
            1,
            6,
            8
          ],
          "items": {
            "type": "integer",
            "description": "list all atom numbers that should be counted",
            "format": "int32"
          }
        },
        "countIsotopes": {
          "type": "array",
          "description": "list all atom numbe - isotope pairs that should be counted",
          "example": [
            {
              "atomNumber": 6,
              "isotopeNumber": 12
            }
          ],
          "items": {
            "$ref": "#/definitions/AtomNumberIsotopePair"
          }
        },
        "inputFormat": {
          "type": "string",
          "description": "the input format and options",
          "example": "smiles"
        },
        "operations": {
          "type": "string",
          "description": "Comma separated list of operations. null or empty means all operation. Available operations:\n* mass: average molecular mass calculated from the standard atomic weights,\n* exactMass: monoisotopic mass calculated from the weights of the most abundant natural isotopes of the elements,\n* formula: chemical formula of the molecule according to the Hill system,\n* formalChargeFormula: chemical formula of the molecule including the formal charge according to the Hill system,\n* isotopeFormula: chemical formula of the molecule listing isotopes separately according to the Hill system,\n* isotopeFormalChargeFormula: chemical formula of the molecule listing isotopes separately and including the formal charge according to the Hill system,\n* dotDisconnectedFormula:  chemical formula of the molecule(s) separating fragment formulas by dots (e.g. salts, counterions, solvent molecules etc. are present),\n* dotDisconnectedFormalChargeFormula:  chemical formula of the molecule(s) separating fragment formulas by dots and including the formal charge (e.g. salts, counterions, solvent molecules etc. are present),\n* dotDisconnectedIsotopeFormula: chemical formula of the molecule separating fragment formulas by dots and listing isotopes separately,\n* dotDisconnectedIsotopeFormalChargeFormula: chemical formula of the molecule separating fragment formulas by dots, listing isotopes separately and including the formal charge,\n* groupedDotDisconnectedFormula: the grouped dot-disconnected molecular formula of a multifragment molecule,\n* composition: elemental composition given in weight percentage (w/w %) calculated from the atomic masses,\n* isotopeComposition: elemental composition listing isotopes separately (w/w %),\n* isotopeDistribution: the isotopic distributions for the molecule (the distribution of fragments are merged, it takes charge into account),\n* allAtomCount: number of all atoms in the molecule,\n* countAtoms: number of the specified atom in the molecule,\n* countIsotopes: number of the specified isotope in the molecule.",
          "example": "mass, formula",
          "x-nullable": true
        },
        "structure": {
          "type": "string",
          "description": "the molecule string",
          "example": "NC(CC1=CC=CC=C1)C(O)=O"
        },
        "symbolD": {
          "type": "boolean",
          "description": "deprecated, use symbolID instead",
          "x-deprecated": true
        },
        "symbolID": {
          "type": "boolean",
          "description": "If set to false, isotopes of hydrogen are displayed in formulas as 2H and 3H, if true, D and T symbols are used, default is true."
        }
      },
      "description": "Json structure that contains the structure and the needed operations."
    },
    "StructureRequestHBDARequest": {
      "required": [
        "structure"
      ],
      "type": "object",
      "properties": {
        "excludeHalogens": {
          "type": "boolean",
          "description": "If set to true (default), it excludes halogen atoms from acceptors",
          "example": true
        },
        "excludeSulfur": {
          "type": "boolean",
          "description": "If set to true (default), it excludes sulfur atoms from acceptors",
          "example": true
        },
        "inputFormat": {
          "type": "string",
          "description": "the input format and options",
          "example": "smiles"
        },
        "outputFormat": {
          "type": "string",
          "description": "The output format and options. The default is mrv.",
          "example": "mrv"
        },
        "outputStructureIncluded": {
          "type": "boolean",
          "example": false
        },
        "pH": {
          "type": "number",
          "description": "Sets the pH: major microspecies on given pH is taken as input molecule\nif not set (default) then the input molecule is taken as it is.",
          "format": "double",
          "example": 7.4
        },
        "resultMoleculeFormat": {
          "type": "string",
          "description": "Deprecated. Use \"outputFormat\" instead",
          "example": "mrv",
          "x-deprecated": true
        },
        "resultMoleculeIncluded": {
          "type": "boolean",
          "description": "Deprecated. Use \"outputStructureIncluded\" instead.",
          "example": false,
          "x-deprecated": true
        },
        "structure": {
          "type": "string",
          "description": "the molecule string",
          "example": "NC(CC1=CC=CC=C1)C(O)=O"
        }
      },
      "description": "Json structure that contains the structure and the needed parameters."
    },
    "StructureRequestHLBRequest": {
      "required": [
        "structure"
      ],
      "type": "object",
      "properties": {
        "inputFormat": {
          "type": "string",
          "description": "the input format and options",
          "example": "smiles"
        },
        "structure": {
          "type": "string",
          "description": "the molecule string",
          "example": "NC(CC1=CC=CC=C1)C(O)=O"
        }
      },
      "description": "Json structure that contains the structure and the needed parameters."
    },
    "StructureRequestHergRequest": {
      "required": [
        "structure"
      ],
      "type": "object",
      "properties": {
        "inputFormat": {
          "type": "string",
          "description": "the input format and options",
          "example": "smiles"
        },
        "outputFormat": {
          "type": "string",
          "description": "The output format and options. The default is mrv.",
          "example": "mrv"
        },
        "structure": {
          "type": "string",
          "description": "the molecule string",
          "example": "NC(CC1=CC=CC=C1)C(O)=O"
        }
      },
      "description": "Json structure that contains the structure and the needed parameters."
    },
    "StructureRequestIsoelectricPointRequest": {
      "required": [
        "pHStep",
        "structure"
      ],
      "type": "object",
      "properties": {
        "inputFormat": {
          "type": "string",
          "description": "the input format and options",
          "example": "smiles"
        },
        "pHStep": {
          "type": "number",
          "description": "  Isoelectric point plugin calculates gross charge distribution of a molecule as function of pH. \n                                                Net charge of an ionizable molecule is zero at a certain pH, this pH is called the isoelectric point. \n                                                It sets the pH step size of the calculation, default is 0.5\n                                                ",
          "format": "double",
          "example": 0.5
        },
        "structure": {
          "type": "string",
          "description": "the molecule string",
          "example": "NC(CC1=CC=CC=C1)C(O)=O"
        }
      },
      "description": "Json structure that contains the structure and the needed parameters."
    },
    "StructureRequestLogDRequest": {
      "required": [
        "structure"
      ],
      "type": "object",
      "properties": {
        "inputFormat": {
          "type": "string",
          "description": "the input format and options",
          "example": "smiles"
        },
        "phList": {
          "type": "array",
          "description": "pH values for which logD values are calculated.\n\t\tDefault values: [1.5, 5.0, 6.5, 7.4]",
          "example": [
            1.5,
            5,
            6.5,
            7.4
          ],
          "items": {
            "type": "number",
            "description": "pH values for which logD values are calculated.\n\t\tDefault values: [1.5, 5.0, 6.5, 7.4]",
            "format": "double"
          }
        },
        "phSequence": {
          "$ref": "#/definitions/PhSequence"
        },
        "structure": {
          "type": "string",
          "description": "the molecule string",
          "example": "NC(CC1=CC=CC=C1)C(O)=O"
        }
      },
      "description": "Json structure that contains the structure and the needed parameters.\nWARNING: Of parameters 'phList' and 'phSequence' exactly one should exist!"
    },
    "StructureRequestLogPRequest": {
      "required": [
        "structure"
      ],
      "type": "object",
      "properties": {
        "atomIncrements": {
          "type": "boolean",
          "description": "Enable atomic logp increments calculation.",
          "example": true
        },
        "inputFormat": {
          "type": "string",
          "description": "the input format and options",
          "example": "smiles"
        },
        "method": {
          "type": "string",
          "description": "Method for calculating logP (CHEMAXON or CONSENSUS). Default: CHEMAXON",
          "example": "CHEMAXON",
          "enum": [
            "CONSENSUS",
            "CHEMAXON",
            "USER_DEFINED",
            "CHEMAXON, CONSENSUS"
          ]
        },
        "structure": {
          "type": "string",
          "description": "the molecule string",
          "example": "NC(CC1=CC=CC=C1)C(O)=O"
        }
      },
      "description": "Json structure that contains the structure and the needed parameters."
    },
    "StructureRequestMajorMicrospeciesRequest": {
      "required": [
        "resultMoleculeFormat",
        "structure"
      ],
      "type": "object",
      "properties": {
        "inputFormat": {
          "type": "string",
          "description": "the input format and options",
          "example": "smiles"
        },
        "pH": {
          "type": "number",
          "description": "Sets the pH: major microspecies on given pH is taken as input molecule.\n\t\t\tDefault value: 7.4",
          "format": "double",
          "example": 7.4
        },
        "resultMoleculeFormat": {
          "type": "string",
          "description": "Result molecule format. Default is MRV",
          "example": "MRV"
        },
        "structure": {
          "type": "string",
          "description": "the molecule string",
          "example": "NC(CC1=CC=CC=C1)C(O)=O"
        }
      },
      "description": "Json structure that contains the structure and the needed parameters."
    },
    "StructureRequestPKADistributionRequest": {
      "required": [
        "resultMoleculeFormat",
        "structure"
      ],
      "type": "object",
      "properties": {
        "considerTautomerization": {
          "type": "boolean",
          "example": true
        },
        "inputFormat": {
          "type": "string",
          "description": "the input format and options",
          "example": "smiles"
        },
        "pKaLowerLimit": {
          "type": "number",
          "format": "double",
          "example": -20
        },
        "pKaUpperLimit": {
          "type": "number",
          "format": "double",
          "example": 10
        },
        "phSequence": {
          "$ref": "#/definitions/PhSequence"
        },
        "resultMoleculeFormat": {
          "type": "string",
          "description": "Result molecule format. Default is MRV",
          "example": "MRV"
        },
        "structure": {
          "type": "string",
          "description": "the molecule string",
          "example": "NC(CC1=CC=CC=C1)C(O)=O"
        },
        "temperature": {
          "type": "number",
          "format": "double",
          "example": 298
        }
      },
      "description": "Json structure that contains the structure and the needed parameters."
    },
    "StructureRequestPKARequest": {
      "required": [
        "structure",
        "types"
      ],
      "type": "object",
      "properties": {
        "inputFormat": {
          "type": "string",
          "description": "the input format and options",
          "example": "smiles"
        },
        "micro": {
          "type": "boolean",
          "description": "Sets micro pKa calculation. Default: <code>false</code> (macro pKa calculation).",
          "example": false
        },
        "outputFormat": {
          "type": "string",
          "description": "The output format and options. The default is mrv.",
          "example": "mrv"
        },
        "outputStructureIncluded": {
          "type": "boolean",
          "example": false
        },
        "pKaLowerLimit": {
          "type": "number",
          "format": "double",
          "example": -20
        },
        "pKaUpperLimit": {
          "type": "number",
          "format": "double",
          "example": 10
        },
        "prefix": {
          "type": "string",
          "example": "DYNAMIC",
          "enum": [
            "STATIC",
            "DYNAMIC"
          ]
        },
        "resultMoleculeFormat": {
          "type": "string",
          "description": "Deprecated. Use \"outputFormat\" instead",
          "example": "mrv",
          "x-deprecated": true
        },
        "resultMoleculeIncluded": {
          "type": "boolean",
          "description": "Deprecated. Use \"outputStructureIncluded\" instead.",
          "example": false,
          "x-deprecated": true
        },
        "structure": {
          "type": "string",
          "description": "the molecule string",
          "example": "NC(CC1=CC=CC=C1)C(O)=O"
        },
        "temperature": {
          "type": "number",
          "format": "double",
          "example": 298
        },
        "types": {
          "type": "string",
          "example": "pKa, acidic, basic"
        }
      },
      "description": "Json structure that contains the structure and the needed parameters."
    },
    "StructureRequestPartialElementalAnalysisRequest": {
      "required": [
        "structure"
      ],
      "type": "object",
      "properties": {
        "indexes": {
          "uniqueItems": true,
          "type": "array",
          "description": "Set of the selected atom indexes (0-based)",
          "items": {
            "type": "integer",
            "description": "Set of the selected atom indexes (0-based)",
            "format": "int32"
          }
        },
        "inputFormat": {
          "type": "string",
          "description": "the input format and options",
          "example": "smiles"
        },
        "structure": {
          "type": "string",
          "description": "the molecule string",
          "example": "NC(CC1=CC=CC=C1)C(O)=O"
        }
      },
      "description": "The input structure and the 0-based indexes of selected atoms."
    },
    "StructureRequestPolarSurfaceAreaRequest": {
      "required": [
        "structure"
      ],
      "type": "object",
      "properties": {
        "excludePhosphorus": {
          "type": "boolean",
          "description": "If set to true (default), it excludes phosphorus atoms from calculation",
          "example": true
        },
        "excludeSulfur": {
          "type": "boolean",
          "description": "If set to true (default), it excludes sulfur atoms from calculation",
          "example": true
        },
        "inputFormat": {
          "type": "string",
          "description": "the input format and options",
          "example": "smiles"
        },
        "outputFormat": {
          "type": "string",
          "description": "The output format and options. The default is mrv.",
          "example": "mrv"
        },
        "outputStructureIncluded": {
          "type": "boolean",
          "example": false
        },
        "pH": {
          "type": "number",
          "description": "Sets the pH: major microspecies on given pH is taken as input molecule \nif set to null (default) then the input molecule is taken as it is.",
          "format": "double",
          "example": 7.4
        },
        "resultMoleculeFormat": {
          "type": "string",
          "description": "Deprecated. Use \"outputFormat\" instead",
          "example": "mrv",
          "x-deprecated": true
        },
        "resultMoleculeIncluded": {
          "type": "boolean",
          "description": "Deprecated. Use \"outputStructureIncluded\" instead.",
          "example": false,
          "x-deprecated": true
        },
        "structure": {
          "type": "string",
          "description": "the molecule string",
          "example": "NC(CC1=CC=CC=C1)C(O)=O"
        }
      },
      "description": "Json structure that contains the structure and the needed parameters."
    },
    "StructureRequestSolubilityRequest": {
      "required": [
        "structure"
      ],
      "type": "object",
      "properties": {
        "inputFormat": {
          "type": "string",
          "description": "the input format and options",
          "example": "smiles"
        },
        "phSequence": {
          "$ref": "#/definitions/PhSequence"
        },
        "structure": {
          "type": "string",
          "description": "the molecule string",
          "example": "NC(CC1=CC=CC=C1)C(O)=O"
        },
        "unit": {
          "type": "string",
          "description": "Unit to express solubility (default is milliMolar)",
          "example": "MM",
          "enum": [
            "nM",
            "uM",
            "mM",
            "mg/ml",
            "mol/l",
            "logS",
            "NM, UM, MM, LOGS, MGPERML, MOLPERL"
          ]
        }
      },
      "description": "Json structure that contains the structure and the needed parameters."
    },
    "StructureRequestStereoisomerRequest": {
      "required": [
        "resultMoleculeFormat",
        "structure"
      ],
      "type": "object",
      "properties": {
        "inputFormat": {
          "type": "string",
          "description": "the input format and options",
          "example": "smiles"
        },
        "maxStereoisomerCount": {
          "type": "integer",
          "description": "[OPTIONAL] The maximum number of stereoisomers to be generated.",
          "format": "int32",
          "example": 1000
        },
        "outputIn3d": {
          "type": "boolean",
          "description": "3D structures are generated (invalid 3D structure are filtered). Default is false.",
          "example": false
        },
        "protectDoubleBondStereo": {
          "type": "boolean",
          "description": "If <code>true</code> then the stereo configuration of double bonds with preset stereo information \n                                                will not be changed. Default is false.",
          "example": false
        },
        "protectTetrahedralStereo": {
          "type": "boolean",
          "description": "If <code>true</code> then stereo configuration of tetrahedral stereo centers with preset stereo information \n                                                will not be changed.Default is false.",
          "example": false
        },
        "resultMoleculeFormat": {
          "type": "string",
          "description": "Result molecule format. Default is MRV",
          "example": "MRV"
        },
        "structure": {
          "type": "string",
          "description": "the molecule string",
          "example": "NC(CC1=CC=CC=C1)C(O)=O"
        },
        "type": {
          "type": "string",
          "description": "Sets which types of stereoisomers should be generated. Default is TETRAHEDRAL.",
          "example": "TETRAHEDRAL",
          "enum": [
            "TETRAHEDRAL",
            "DOUBLE_BOND",
            "BOTH"
          ]
        },
        "verify3d": {
          "type": "boolean",
          "description": "Invalid 3D structures of generated stereoisomers are filtered. Default is false.",
          "example": false
        }
      },
      "description": "Json structure that contains the structure and the needed parameters."
    },
    "StructureRequestTopologyAnalyserRequest": {
      "required": [
        "structure"
      ],
      "type": "object",
      "properties": {
        "aliphaticRingSize": {
          "type": "integer",
          "description": "Size of the aliphatic rings which should be counted in aliphatic ring count. (If 0 then all aliphatic rings are counted.)",
          "format": "int32"
        },
        "aromaticRingSize": {
          "type": "integer",
          "description": "Size of the aromatic rings which should be counted in aromatic ring count. (If 0 then all aromatic rings are counted.)",
          "format": "int32"
        },
        "aromatizationMethod": {
          "type": "string",
          "description": "Unit to express solubility (default is GENERAL)",
          "example": "GENERAL",
          "enum": [
            "GENERAL",
            "BASIC",
            "LOOSE",
            "GENERAL, BASIC, LOOSE"
          ]
        },
        "carboRingSize": {
          "type": "integer",
          "description": "Size of the carbo rings which should be counted in carbo ring count. (If 0 then all carbo rings are counted.)",
          "format": "int32"
        },
        "fusedAliphaticRingSize": {
          "type": "integer",
          "description": "Size of the fused aliphatic rings which should be counted in fused aliphatic ring count. (If 0 then all fused aliphatic rings are counted.)",
          "format": "int32"
        },
        "fusedAromaticRingSize": {
          "type": "integer",
          "description": "Size of the fused aromatic rings which should be counted in fused aromatic ring count. (If 0 then all fused aromatic rings are counted.)",
          "format": "int32"
        },
        "heteroAliphaticRingSize": {
          "type": "integer",
          "description": "Size of the hetero aliphatic rings which should be counted in hetero aliphatic ring count. (If 0 then all hetero aliphatic rings are counted.)",
          "format": "int32"
        },
        "heteroAromaticRingSize": {
          "type": "integer",
          "description": "Size of the hetero aromatic rings which should be counted in hetero aromatic ring count. (If 0 then all hetero aromatic rings are counted.)",
          "format": "int32"
        },
        "heteroRingSize": {
          "type": "integer",
          "description": "Size of the hetero rings which should be counted in hetero ring count. (If 0 then all hetero rings are counted.)",
          "format": "int32"
        },
        "inputFormat": {
          "type": "string",
          "description": "the input format and options",
          "example": "smiles"
        },
        "operations": {
          "type": "string",
          "description": "Comma separated list of operations. null or empty means all operations. Available operations:\n* aliphaticAtomCount: number of atoms in the molecule having no aromatic bond (excluding hydrogens),\n* aliphaticBondCount: number of non-aromatic bonds in the molecule (excluding bonds of hydrogen atoms),\n* aliphaticRingCount: number of those rings in the molecule that have non-aromatic bonds (SSSR based),\n* aliphaticRings: those rings in the molecule that have non-aromatic bonds (SSSR based),\n* allAtomCount: number of atoms in the molecule including hydrogens,\n* aromaticAtomCount: number of atoms in the molecule having aromatic bonds,\n* aromaticBondCount: number of aromatic bonds in the molecule,\n* aromaticRingCount: number of aromatic rings in the molecule (this number is calculated from the smallest set of smallest aromatic rings (SSSAR), which might contain rings which are not part of the standard SSSR ring set; as a consequence, the sum of the aliphatic ring count and the aromatic ring count can sometimes be greater than the ring count value; the difference is the signal of a macroaromatic ring system),\n* aromaticRings: aromatic rings in the molecule,\n* asymmmetricAtoms: the asymmetric atoms (having four different ligands),\n* balabanIndex: the Balaban distance connectivity of the molecule, which is the average distance sum connectivity,\n* bondCount: number of bonds in the molecule including bonds of hydrogen atoms,\n* carboAliphaticRingCount: number of aliphatic rings containing only carbon atoms,\n* carboAromaticRingCount: number of aromatic rings containing only carbon atoms (SSSAR based),\n* carboRings: rings containing only carbon atoms,\n* carboRingCount: number of rings containing only carbon atoms,\n* chainAtomCount:  number of chain atoms (non-ring atoms excluding hydrogens),\n* chainBondCount: number of chain bonds (non-ring bonds excluding bonds of hydrogen atoms),\n* chiralCenterCount: the number of tetrahedral stereogenic centers (this function identifies two chiral centers in 1,4-dimethylcyclohexane, which does not contain asymmetric atoms),\n* chiralCenters: tetrahedral stereogenic centers (this function identifies two chiral centers in 1,4-dimethylcyclohexane, which does not contain asymmetric atoms),\n* coloredLargestConjugatedSystem: the structure in which the atoms of largest conjugated system are colored,\n* cyclomaticNumber: the smallest number of bonds which must be removed so that no circuit remains (also known as circuit rank),\n* distanceDegree: the sum of the corresponding row values in the distance matrix for each atom,\n* eccentricity: the greatest value in the corresponding row of the distance matrix for each atom,\n* fragmentCount: number of fragments in the sketch,\n* fsp3:  number of sp3 hybridized carbons divided by the total carbon count,\n* fusedAliphaticRingCount: number of aliphatic rings having common bonds with other rings,\n* fusedAliphaticRings: aliphatic rings having common bonds with other rings,\n* fusedAromaticRingCount: number of aromatic rings having common bonds with other rings,\n* fusedAromaticRings: aromatic rings having common bonds with other rings,\n* fusedRingCount: number of fused rings in the molecule (having common bonds),\n* hararyIndex: half-sum of the off-diagonal elements of the reciprocal molecular distance matrix of the molecule,\n* heteroAliphaticRingCount: number of aliphatic heterocycles in the molecule,\n* heteroAliphaticRings: aliphatic heterocycles in the molecule,\n* heteroAromaticRingCount: number of aromatic heterocycles in the molecule,\n* heteroAromaticRings: aromatic heterocycles in the molecule,\n* heteroRingCount: number of rings containing hetero atom(s),\n* heteroRings: rings containing hetero atom(s),\n* hyperWienerIndex: a variant of the Wiener index,\n* isConnectedGraph: determines if the structure is a connected graph or not (if there is a path from any node to any other node in the graph)\n* largestConjugatedSystem: the largest conjugated system in the structure,\n* largestConjugatedSystemSize: the largest conjugated system size (number of pi electron pairs),\n* largestRing: the largest ring in the molecule,\n* largestRingSize: size of the largest ring in the molecule,\n* largestRingSizeOfAtom: the size of largest ring containing the specified atom,\n* largestRingSystem: rings in the largest ring system,\n* largestRingSystemSize: number of rings in the largest ring system,\n* plattIndex: sum of the edge degrees of a molecular graph,\n* possibleCTBondCount: counts the double bonds that can be CIS / TRANS\n* possibleCTBonds: lists the double bonds that can be CIS / TRANS\n* randicIndex: harmonic sum of the geometric means of the node degrees for each edge,\n* ringAtomCount: number of ring atoms,\n* ringBondCount: number of ring bonds,\n* ringCount: number of rings in the molecule (this calculation is based on SSSR (Smallest Set of Smallest Rings)),\n* ringCountOfAtom: the number of rings (SSSR smallest set of smallest rings) an atom is part of,\n* rings: the rings in the structure,\n* ringSystems: disjunct ring systems,\n* ringSystemCount: number of disjunct ring systems,\n* rotatableBondCount: number of rotatable bonds in the molecule (unsaturated bonds, and single bonds connected to hydrogens or terminal atoms, single bonds of amides, sulphonamides and those connecting two hindered aromatic rings (having at least three ortho substituents) are considered non-rotatable),\n* smallestRing: the smallest ring in the molecule,\n* smallestRingSize: size of the smallest ring in the molecule,\n* smallestRingSizeOfAtom: size of smallest ring containing the specified atom,\n* smallestRingSystem: rings in the smallest ring system,\n* smallestRingSystemSize: number of rings in the smallest ring system,\n* stereoDoubleBondCount: number of double bonds with defined stereochemistry,\n* stericEffect: topological steric effect index (TSEI) of an atom calculated from the covalent radii values and topological distances (the stericEffectIndex is related to the steric hindrance of the given atom),\n* szegedIndex: the Szeged index extends the Wiener index for cyclic graphs by counting the number of atoms on both sides of each bond (those atoms only which are nearer to the given side of the bond than to the other), and sum these counts,\n* wienerIndex: the average topological atom distance (half of the sum of all atom distances) in the molecule\n* wienerPolarity: the number of 3 bond length distances in the molecule.",
          "example": "aromaticRingCount, aromaticRings",
          "x-nullable": true
        },
        "outputFormat": {
          "type": "string",
          "description": "The output format and options. The default is mrv.",
          "example": "mrv"
        },
        "ringSize": {
          "type": "integer",
          "description": "Size of the ring to count. (If 0 then all rings are counted.)",
          "format": "int32"
        },
        "ringSystemSize": {
          "type": "integer",
          "description": "Size of the ring system to count. (If 0 then all ring systems are counted.)",
          "format": "int32"
        },
        "structure": {
          "type": "string",
          "description": "the molecule string",
          "example": "NC(CC1=CC=CC=C1)C(O)=O"
        }
      },
      "description": "Json structure that contains the structure and the needed parameters."
    },
    "TopologyAnalyserRequest": {
      "type": "object",
      "properties": {
        "aliphaticRingSize": {
          "type": "integer",
          "description": "Size of the aliphatic rings which should be counted in aliphatic ring count. (If 0 then all aliphatic rings are counted.)",
          "format": "int32"
        },
        "aromaticRingSize": {
          "type": "integer",
          "description": "Size of the aromatic rings which should be counted in aromatic ring count. (If 0 then all aromatic rings are counted.)",
          "format": "int32"
        },
        "aromatizationMethod": {
          "type": "string",
          "description": "Unit to express solubility (default is GENERAL)",
          "example": "GENERAL",
          "enum": [
            "GENERAL",
            "BASIC",
            "LOOSE",
            "GENERAL, BASIC, LOOSE"
          ]
        },
        "carboRingSize": {
          "type": "integer",
          "description": "Size of the carbo rings which should be counted in carbo ring count. (If 0 then all carbo rings are counted.)",
          "format": "int32"
        },
        "fusedAliphaticRingSize": {
          "type": "integer",
          "description": "Size of the fused aliphatic rings which should be counted in fused aliphatic ring count. (If 0 then all fused aliphatic rings are counted.)",
          "format": "int32"
        },
        "fusedAromaticRingSize": {
          "type": "integer",
          "description": "Size of the fused aromatic rings which should be counted in fused aromatic ring count. (If 0 then all fused aromatic rings are counted.)",
          "format": "int32"
        },
        "heteroAliphaticRingSize": {
          "type": "integer",
          "description": "Size of the hetero aliphatic rings which should be counted in hetero aliphatic ring count. (If 0 then all hetero aliphatic rings are counted.)",
          "format": "int32"
        },
        "heteroAromaticRingSize": {
          "type": "integer",
          "description": "Size of the hetero aromatic rings which should be counted in hetero aromatic ring count. (If 0 then all hetero aromatic rings are counted.)",
          "format": "int32"
        },
        "heteroRingSize": {
          "type": "integer",
          "description": "Size of the hetero rings which should be counted in hetero ring count. (If 0 then all hetero rings are counted.)",
          "format": "int32"
        },
        "operations": {
          "type": "string",
          "description": "Comma separated list of operations. null or empty means all operations. Available operations:\n* aliphaticAtomCount: number of atoms in the molecule having no aromatic bond (excluding hydrogens),\n* aliphaticBondCount: number of non-aromatic bonds in the molecule (excluding bonds of hydrogen atoms),\n* aliphaticRingCount: number of those rings in the molecule that have non-aromatic bonds (SSSR based),\n* aliphaticRings: those rings in the molecule that have non-aromatic bonds (SSSR based),\n* allAtomCount: number of atoms in the molecule including hydrogens,\n* aromaticAtomCount: number of atoms in the molecule having aromatic bonds,\n* aromaticBondCount: number of aromatic bonds in the molecule,\n* aromaticRingCount: number of aromatic rings in the molecule (this number is calculated from the smallest set of smallest aromatic rings (SSSAR), which might contain rings which are not part of the standard SSSR ring set; as a consequence, the sum of the aliphatic ring count and the aromatic ring count can sometimes be greater than the ring count value; the difference is the signal of a macroaromatic ring system),\n* aromaticRings: aromatic rings in the molecule,\n* asymmmetricAtoms: the asymmetric atoms (having four different ligands),\n* balabanIndex: the Balaban distance connectivity of the molecule, which is the average distance sum connectivity,\n* bondCount: number of bonds in the molecule including bonds of hydrogen atoms,\n* carboAliphaticRingCount: number of aliphatic rings containing only carbon atoms,\n* carboAromaticRingCount: number of aromatic rings containing only carbon atoms (SSSAR based),\n* carboRings: rings containing only carbon atoms,\n* carboRingCount: number of rings containing only carbon atoms,\n* chainAtomCount:  number of chain atoms (non-ring atoms excluding hydrogens),\n* chainBondCount: number of chain bonds (non-ring bonds excluding bonds of hydrogen atoms),\n* chiralCenterCount: the number of tetrahedral stereogenic centers (this function identifies two chiral centers in 1,4-dimethylcyclohexane, which does not contain asymmetric atoms),\n* chiralCenters: tetrahedral stereogenic centers (this function identifies two chiral centers in 1,4-dimethylcyclohexane, which does not contain asymmetric atoms),\n* coloredLargestConjugatedSystem: the structure in which the atoms of largest conjugated system are colored,\n* cyclomaticNumber: the smallest number of bonds which must be removed so that no circuit remains (also known as circuit rank),\n* distanceDegree: the sum of the corresponding row values in the distance matrix for each atom,\n* eccentricity: the greatest value in the corresponding row of the distance matrix for each atom,\n* fragmentCount: number of fragments in the sketch,\n* fsp3:  number of sp3 hybridized carbons divided by the total carbon count,\n* fusedAliphaticRingCount: number of aliphatic rings having common bonds with other rings,\n* fusedAliphaticRings: aliphatic rings having common bonds with other rings,\n* fusedAromaticRingCount: number of aromatic rings having common bonds with other rings,\n* fusedAromaticRings: aromatic rings having common bonds with other rings,\n* fusedRingCount: number of fused rings in the molecule (having common bonds),\n* hararyIndex: half-sum of the off-diagonal elements of the reciprocal molecular distance matrix of the molecule,\n* heteroAliphaticRingCount: number of aliphatic heterocycles in the molecule,\n* heteroAliphaticRings: aliphatic heterocycles in the molecule,\n* heteroAromaticRingCount: number of aromatic heterocycles in the molecule,\n* heteroAromaticRings: aromatic heterocycles in the molecule,\n* heteroRingCount: number of rings containing hetero atom(s),\n* heteroRings: rings containing hetero atom(s),\n* hyperWienerIndex: a variant of the Wiener index,\n* isConnectedGraph: determines if the structure is a connected graph or not (if there is a path from any node to any other node in the graph)\n* largestConjugatedSystem: the largest conjugated system in the structure,\n* largestConjugatedSystemSize: the largest conjugated system size (number of pi electron pairs),\n* largestRing: the largest ring in the molecule,\n* largestRingSize: size of the largest ring in the molecule,\n* largestRingSizeOfAtom: the size of largest ring containing the specified atom,\n* largestRingSystem: rings in the largest ring system,\n* largestRingSystemSize: number of rings in the largest ring system,\n* plattIndex: sum of the edge degrees of a molecular graph,\n* possibleCTBondCount: counts the double bonds that can be CIS / TRANS\n* possibleCTBonds: lists the double bonds that can be CIS / TRANS\n* randicIndex: harmonic sum of the geometric means of the node degrees for each edge,\n* ringAtomCount: number of ring atoms,\n* ringBondCount: number of ring bonds,\n* ringCount: number of rings in the molecule (this calculation is based on SSSR (Smallest Set of Smallest Rings)),\n* ringCountOfAtom: the number of rings (SSSR smallest set of smallest rings) an atom is part of,\n* rings: the rings in the structure,\n* ringSystems: disjunct ring systems,\n* ringSystemCount: number of disjunct ring systems,\n* rotatableBondCount: number of rotatable bonds in the molecule (unsaturated bonds, and single bonds connected to hydrogens or terminal atoms, single bonds of amides, sulphonamides and those connecting two hindered aromatic rings (having at least three ortho substituents) are considered non-rotatable),\n* smallestRing: the smallest ring in the molecule,\n* smallestRingSize: size of the smallest ring in the molecule,\n* smallestRingSizeOfAtom: size of smallest ring containing the specified atom,\n* smallestRingSystem: rings in the smallest ring system,\n* smallestRingSystemSize: number of rings in the smallest ring system,\n* stereoDoubleBondCount: number of double bonds with defined stereochemistry,\n* stericEffect: topological steric effect index (TSEI) of an atom calculated from the covalent radii values and topological distances (the stericEffectIndex is related to the steric hindrance of the given atom),\n* szegedIndex: the Szeged index extends the Wiener index for cyclic graphs by counting the number of atoms on both sides of each bond (those atoms only which are nearer to the given side of the bond than to the other), and sum these counts,\n* wienerIndex: the average topological atom distance (half of the sum of all atom distances) in the molecule\n* wienerPolarity: the number of 3 bond length distances in the molecule.",
          "example": "aromaticRingCount, aromaticRings",
          "x-nullable": true
        },
        "outputFormat": {
          "type": "string",
          "description": "The output format and options. The default is mrv.",
          "example": "mrv"
        },
        "ringSize": {
          "type": "integer",
          "description": "Size of the ring to count. (If 0 then all rings are counted.)",
          "format": "int32"
        },
        "ringSystemSize": {
          "type": "integer",
          "description": "Size of the ring system to count. (If 0 then all ring systems are counted.)",
          "format": "int32"
        }
      }
    },
    "TopologyAnalyserResult": {
      "type": "object",
      "properties": {
        "aliphaticAtomCount": {
          "type": "integer",
          "description": "The aliphatic atom count in the structure",
          "format": "int32"
        },
        "aliphaticBondCount": {
          "type": "integer",
          "description": "The aliphatic bond count of the structure",
          "format": "int32"
        },
        "aliphaticRingCount": {
          "type": "integer",
          "description": "The aliphatic ring count of the structure",
          "format": "int32"
        },
        "aliphaticRings": {
          "type": "array",
          "description": "Aliphatic rings of the structure",
          "items": {
            "type": "array",
            "description": "Aliphatic rings of the structure",
            "items": {
              "type": "integer",
              "description": "Aliphatic rings of the structure",
              "format": "int32"
            }
          }
        },
        "allAtomCount": {
          "type": "integer",
          "description": "The atom count",
          "format": "int32"
        },
        "aromaticAtomCount": {
          "type": "integer",
          "description": "The aromatic atom count in the structure",
          "format": "int32"
        },
        "aromaticBondCount": {
          "type": "integer",
          "description": "The aromatic bond count of the structure",
          "format": "int32"
        },
        "aromaticRingCount": {
          "type": "integer",
          "description": "The aromatic ring count of the structure",
          "format": "int32"
        },
        "aromaticRings": {
          "type": "array",
          "description": "Aromatic rings of the structure",
          "items": {
            "type": "array",
            "description": "Aromatic rings of the structure",
            "items": {
              "type": "integer",
              "description": "Aromatic rings of the structure",
              "format": "int32"
            }
          }
        },
        "asymmmetricAtoms": {
          "type": "array",
          "description": "The asymmetric atoms of the structure",
          "items": {
            "type": "integer",
            "description": "The asymmetric atoms of the structure",
            "format": "int32"
          }
        },
        "balabanIndex": {
          "type": "number",
          "description": "The Balaban distance connectivity of the structure, which is the average distance sum connectivity",
          "format": "double"
        },
        "bondCount": {
          "type": "integer",
          "description": "The number of bonds",
          "format": "int32"
        },
        "carboAliphaticRingCount": {
          "type": "integer",
          "description": "The number of aliphatic rings containing only carbon atoms",
          "format": "int32"
        },
        "carboAromaticRingCount": {
          "type": "integer",
          "description": "The number of aromatic rings containing only carbon atoms",
          "format": "int32"
        },
        "carboRingCount": {
          "type": "integer",
          "description": "The number of rings containing only carbon atoms",
          "format": "int32"
        },
        "carboRings": {
          "type": "array",
          "description": "Carbocyclic rings in the structure (rings containing carbon  atoms only)",
          "items": {
            "type": "array",
            "description": "Carbocyclic rings in the structure (rings containing carbon  atoms only)",
            "items": {
              "type": "integer",
              "description": "Carbocyclic rings in the structure (rings containing carbon  atoms only)",
              "format": "int32"
            }
          }
        },
        "chainAtomCount": {
          "type": "integer",
          "description": "The chain atom count",
          "format": "int32"
        },
        "chainBondCount": {
          "type": "integer",
          "description": "The chain bond count",
          "format": "int32"
        },
        "chiralCenterCount": {
          "type": "integer",
          "description": "The number of tetrahedral stereogenic centers",
          "format": "int32"
        },
        "chiralCenters": {
          "type": "array",
          "description": "Indexes of chiral center atoms",
          "items": {
            "type": "integer",
            "description": "Indexes of chiral center atoms",
            "format": "int32"
          }
        },
        "coloredLargestConjugatedSystem": {
          "type": "string",
          "description": "The structure in which the atoms of largest conjugated system are colored"
        },
        "cyclomaticNumber": {
          "type": "integer",
          "description": "The smallest number of graph edges which must be removed such that no circuit remains. Also known as circuit rank.",
          "format": "int32"
        },
        "distanceDegree": {
          "type": "array",
          "description": "Sum of the corresponding row values in the structure's atom-distance matrix",
          "items": {
            "$ref": "#/definitions/AtomEntryInteger"
          }
        },
        "eccentricity": {
          "type": "array",
          "description": "Greatest value of the corresponding row values in the structure's atom-distance matrix",
          "items": {
            "$ref": "#/definitions/AtomEntryInteger"
          }
        },
        "fragmentCount": {
          "type": "integer",
          "description": "The number of fragments (disconnected parts) of the structure",
          "format": "int32"
        },
        "fsp3": {
          "type": "number",
          "description": "The Fsp3 value of the given structure. Fsp3 = number of sp3 carbons / number of carbons",
          "format": "double"
        },
        "fusedAliphaticRingCount": {
          "type": "integer",
          "description": "The fused aliphatic ring count of the structure",
          "format": "int32"
        },
        "fusedAliphaticRings": {
          "type": "array",
          "description": "Atom indexes of the fused aliphatic rings in the structure",
          "items": {
            "type": "array",
            "description": "Atom indexes of the fused aliphatic rings in the structure",
            "items": {
              "type": "integer",
              "description": "Atom indexes of the fused aliphatic rings in the structure",
              "format": "int32"
            }
          }
        },
        "fusedAromaticRingCount": {
          "type": "integer",
          "description": "The fused aromatic ring count of the structure",
          "format": "int32"
        },
        "fusedAromaticRings": {
          "type": "array",
          "description": "Atom indexes of the fused aromatic rings in the structure",
          "items": {
            "type": "array",
            "description": "Atom indexes of the fused aromatic rings in the structure",
            "items": {
              "type": "integer",
              "description": "Atom indexes of the fused aromatic rings in the structure",
              "format": "int32"
            }
          }
        },
        "fusedRingCount": {
          "type": "integer",
          "description": "The number of fused rings (SSSR smallest set of smallest rings) in the structure",
          "format": "int32"
        },
        "hararyIndex": {
          "type": "number",
          "description": "The Harary index which is the half-sum of the off-diagonal elements of the reciprocal molecular distance matrix of the structure",
          "format": "double"
        },
        "heteroAliphaticRingCount": {
          "type": "integer",
          "description": "The aliphatic heterocyclic ring count of the structure",
          "format": "int32"
        },
        "heteroAliphaticRings": {
          "type": "array",
          "description": "Atom indexes of the heteroaliphatic rings in the structure (aliphatic rings containing at least a non-carbon atom)",
          "items": {
            "type": "array",
            "description": "Atom indexes of the heteroaliphatic rings in the structure (aliphatic rings containing at least a non-carbon atom)",
            "items": {
              "type": "integer",
              "description": "Atom indexes of the heteroaliphatic rings in the structure (aliphatic rings containing at least a non-carbon atom)",
              "format": "int32"
            }
          }
        },
        "heteroAromaticRingCount": {
          "type": "integer",
          "description": "The aromatic heterocyclic ring count of the structure",
          "format": "int32"
        },
        "heteroAromaticRings": {
          "type": "array",
          "description": "Atom indexes of the heteroaromatic rings in the structure (aromatic rings containing at least a non-carbon atom)",
          "items": {
            "type": "array",
            "description": "Atom indexes of the heteroaromatic rings in the structure (aromatic rings containing at least a non-carbon atom)",
            "items": {
              "type": "integer",
              "description": "Atom indexes of the heteroaromatic rings in the structure (aromatic rings containing at least a non-carbon atom)",
              "format": "int32"
            }
          }
        },
        "heteroRingCount": {
          "type": "integer",
          "description": "The number of heterocyclic rings in the structure (rings containing at least a non-carbon atom)",
          "format": "int32"
        },
        "heteroRings": {
          "type": "array",
          "description": "Atom indexes of the heterocyclic rings in the structure",
          "items": {
            "type": "array",
            "description": "Atom indexes of the heterocyclic rings in the structure",
            "items": {
              "type": "integer",
              "description": "Atom indexes of the heterocyclic rings in the structure",
              "format": "int32"
            }
          }
        },
        "hyperWienerIndex": {
          "type": "integer",
          "description": "The hyper Wiener index of the structure",
          "format": "int32"
        },
        "isConnectedGraph": {
          "type": "boolean",
          "description": "Determines if the structure is a connected graph or not (if there is a path from any node to any other node in the graph)"
        },
        "largestConjugatedSystem": {
          "type": "array",
          "description": "Atom indexes of the largest conjugated system in the structure",
          "items": {
            "type": "integer",
            "description": "Atom indexes of the largest conjugated system in the structure",
            "format": "int32"
          }
        },
        "largestConjugatedSystemSize": {
          "type": "integer",
          "description": "The largest conjugated system size (number of pi electron pairs)",
          "format": "int32"
        },
        "largestRing": {
          "type": "array",
          "description": "Atom indexes of the largest ring in the structure",
          "items": {
            "type": "integer",
            "description": "Atom indexes of the largest ring in the structure",
            "format": "int32"
          }
        },
        "largestRingSize": {
          "type": "integer",
          "description": "The largest ring size",
          "format": "int32"
        },
        "largestRingSizeOfAtom": {
          "type": "array",
          "description": "The size of largest ring containing the specified atom",
          "items": {
            "$ref": "#/definitions/AtomEntryInteger"
          }
        },
        "largestRingSystem": {
          "type": "array",
          "description": "The largest ring system in the structure",
          "items": {
            "type": "integer",
            "description": "The largest ring system in the structure",
            "format": "int32"
          }
        },
        "largestRingSystemSize": {
          "type": "integer",
          "description": "The size of the largest ring system (number of rings) in the molecule (0 when acylcic)",
          "format": "int32"
        },
        "plattIndex": {
          "type": "integer",
          "description": "The Platt index of the molecule which is equal to the total sum of the edge degrees of a molecular graph",
          "format": "int32"
        },
        "possibleCTBondCount": {
          "type": "integer",
          "description": "The number of double bonds in molecule which can be CIS / TRANS bonds.",
          "format": "int32"
        },
        "possibleCTBonds": {
          "type": "array",
          "description": "The double bonds in molecule which can be CIS / TRANS bonds.",
          "items": {
            "$ref": "#/definitions/BondDescriptorResult"
          }
        },
        "randicIndex": {
          "type": "number",
          "description": "The Randic index or molecular connectivity index as the harmonic sum of the geometric means of the node degrees for each edge",
          "format": "double"
        },
        "ringAtomCount": {
          "type": "integer",
          "description": "The number of ring atoms",
          "format": "int32"
        },
        "ringBondCount": {
          "type": "integer",
          "description": "The number of ring bonds",
          "format": "int32"
        },
        "ringCount": {
          "type": "integer",
          "description": "The number of rings",
          "format": "int32"
        },
        "ringCountOfAtom": {
          "type": "array",
          "description": "The number of rings (SSSR smallest set of smallest rings) an atom is part of",
          "items": {
            "$ref": "#/definitions/AtomEntryInteger"
          }
        },
        "ringSystemCount": {
          "type": "integer",
          "description": "The number of ring systems (fused and spiro rings belong to to one ring system)",
          "format": "int32"
        },
        "ringSystems": {
          "type": "array",
          "description": "The ring systems in the structure, fused and spiro rings belong to one ring system",
          "items": {
            "type": "array",
            "description": "The ring systems in the structure, fused and spiro rings belong to one ring system",
            "items": {
              "type": "integer",
              "description": "The ring systems in the structure, fused and spiro rings belong to one ring system",
              "format": "int32"
            }
          }
        },
        "rings": {
          "type": "array",
          "description": "Atom indexes of the rings in the structure",
          "items": {
            "type": "array",
            "description": "Atom indexes of the rings in the structure",
            "items": {
              "type": "integer",
              "description": "Atom indexes of the rings in the structure",
              "format": "int32"
            }
          }
        },
        "rotatableBondCount": {
          "type": "integer",
          "description": "The rotatable bond count",
          "format": "int32"
        },
        "smallestRing": {
          "type": "array",
          "description": "Atom indexes of the smallest ring in the structure",
          "items": {
            "type": "integer",
            "description": "Atom indexes of the smallest ring in the structure",
            "format": "int32"
          }
        },
        "smallestRingSize": {
          "type": "integer",
          "description": "The smallest ring size",
          "format": "int32"
        },
        "smallestRingSizeOfAtom": {
          "type": "array",
          "description": "The size of smallest ring containing the specified atom",
          "items": {
            "$ref": "#/definitions/AtomEntryInteger"
          }
        },
        "smallestRingSystem": {
          "type": "array",
          "description": "The smallest ring system in the structure",
          "items": {
            "type": "integer",
            "description": "The smallest ring system in the structure",
            "format": "int32"
          }
        },
        "smallestRingSystemSize": {
          "type": "integer",
          "description": "The size of the smallest ring system (number of rings) in the molecule (0 when acylcic)",
          "format": "int32"
        },
        "stereoDoubleBondCount": {
          "type": "integer",
          "description": "The number of stereo double bonds",
          "format": "int32"
        },
        "stericEffect": {
          "type": "array",
          "description": "The topological steric effect index (TSEI) of an atom from covalent radii values and topological distances. The stericEffectIndex is related to the steric hindrance of the given atom.",
          "items": {
            "$ref": "#/definitions/DoubleAtomEntry"
          }
        },
        "szegedIndex": {
          "type": "integer",
          "description": "The Szeged index of the molecule (the Szeged index is based on the Wiener number,\n                                    which is calculated by simply counting the number of nodes on both sides of each edge (and sum these counts),\n                                    the Szeged Index extends the Wiener number for cyclic graphs by counting those nodes only\n                                    which are nearer to the given side of the edge than to the other,\n                                    unreachable nodes (disconnected graphs) or those at equidistance position to both sides of the given edge\n                                    are not taken into account)",
          "format": "int32"
        },
        "wienerIndex": {
          "type": "integer",
          "description": "The Wiener index of the molecule, which is the average topological atom distance (half of the sum of all atom distances) in the molecule.",
          "format": "int32"
        },
        "wienerPolarity": {
          "type": "integer",
          "description": "The Wiener polarity number of the molecule, which is the number of 3 bond length distances in the molecule.",
          "format": "int32"
        }
      }
    },
    "TrainingRecord": {
      "type": "object",
      "properties": {
        "hergClass": {
          "type": "string"
        },
        "similarity": {
          "type": "number",
          "format": "double"
        },
        "structure": {
          "type": "string"
        }
      }
    }
  },
  "x-components": {}
}