swagger: '2.0'
info:
  description: >-
    # À propos

    Ressources qui publient des événements de traffic en temps réel sur le 
    territoire de la Ville de Montréal

    # Général

    Cette section contient des informations communes, dérivant du Design d’API
    de la Ville de Montréal. Se référer à la section appropriée sous Confluence
    : https://villemontreal.atlassian.net/wiki/display/AES/REST+API

    # Authentification

    Cet API est sécurisé avec OpenID Connect.

    Toutes les operations requièrent une authentification.

    # Standards

    Cet API est basé sur plusieurs standards approuvés :
     
     * Standard de design des API de la Ville: https://sticonfluence.interne.montreal.ca/display/AES/REST+API
     * [RFC 2616] Hypertext Transfer Protocol -- HTTP/1.1
     * [RFC 8259] The JavaScript Object Notation (JSON) Data Interchange Format
     * [RFC 7643] System for Cross-domain Identity Management: Core Schema
     * [RFC 7493] The I-JSON Message Format
     * [RFC 7946] The GeoJSON Format
     * ISO 8601 Data elements and interchange formats – Information interchange – Representation of dates and times
     * ...


    # Gestion d'erreur

    Cet API utilise le standard HTTP des status pour indiquer le status de la
    réponse.

    Cette section est basée sur :
    https://sticonfluence.interne.montreal.ca/display/AES/REST+API
    #RESTAPI-R%C3%A9ponseavecerreur

    Il y aura un type d’erreur basé sur le format du Microsoft API :
    https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md
    #7102-error-condition-responses

    # Error

    L’API doit fournir une explication au développeur lors d’une erreur de
    traitement. Le statut de la réponse doit correspondre à un cas d’erreur
    (doit être supérieur ou égal à 400) et la réponse devrait inclure des
    informations additionnelles pour expliciter la cause de l’erreur.

    Les messages d’erreur devraient être produits en anglais, car c’est à
    l’application de décider comment présenter une erreur à l’utilisateur, en
    fonction du code renvoyé. Voir
    https://sticonfluence.interne.montreal.ca/display/AES/REST+API pour plus de
    détails.
  version: 1.0.0
  title: Traffic Event API
  contact:
    email: servicesenligne@ville.montreal.qc.ca
  license:
    name: >-
      Copyright (C) Ville de Montréal - Tous droits réservés.

      La copie non autorisée du projet, de ces fichiers via n'importe quel média
      est interdit.

      Propriétaire et confidentiel
tags:
  - name: events
    description: Resources for consuming traffic events
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
paths:
  /v1/events:
    get:
      tags:
        - events
      operationId: Lists all active traffic events
      description: >-
        Allows to view a list of the active traffic events on the Ville de
        Montreal territory and surroundings
      operationId: allEvents
      produces:
        - application/json
      parameters:
        - in: header
          name: Accept
          type: string
          description: application/json
        - name: expand
          in: query
          description: enriched
          required: false
          type: string
          default: enriched
          collectionFormat: multi
      responses:
        '200':
          description: Successful
          schema:
            $ref: '#/definitions/EventCollection'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden access
        '404':
          description: Not found
        '405':
          description: Invalid input
        '503':
          description: Unavailable
      security:
        - Bearer: []
  '/v1/events/:id':
    get:
      tags:
        - events
      operationId: Returns a specific active event
      description: 'Allows to view a specific traffic event '
      operationId: selectEvent
      produces:
        - application/json
      parameters:
        - in: header
          name: Accept
          type: string
          description: application/json
        - name: expand
          in: query
          description: enriched
          required: false
          type: string
          default: enriched
          collectionFormat: multi
      responses:
        '200':
          description: Successful
          schema:
            $ref: '#/definitions/Event'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden access
        '404':
          description: Not found
        '405':
          description: Invalid input
        '503':
          description: Unavailable
      security:
        - Bearer: []
definitions:
  EventCollection:
    type: object
    description: A collection of event
    properties:
      type:
        type: string
        pattern: /FeatureCollection$/g
        example: FeatureCollection
      features:
        type: array
        items:
          $ref: '#/definitions/Event'
  Event:
    type: object
    description: The traffic event object
    properties:
      type:
        type: string
        pattern: /Feature$/g
        example: Feature
      properties:
        type: object
        properties:
          id:
            $ref: '#/definitions/ObjectId'
          version:
            type: number
            minimum: 1
            example: 1
          eventSource:
            $ref: '#/definitions/EventSource'
          eventType:
            $ref: '#/definitions/EventType'
          eventName:
            $ref: '#/definitions/EventName'
          eventDescription:
            $ref: '#/definitions/EventDescription'
          eventPriority:
            $ref: '#/definitions/EventPriority'
          eventSeverity:
            $ref: '#/definitions/EventSeverity'
          eventData:
            type: object
            description: any
          eventLocation:
            type: object
            properties:
              address:
                $ref: '#/definitions/Address'
              roadSections:
                type: array
                items:
                  $ref: '#/definitions/RoadSection'
          eventTimestamps:
            $ref: '#/definitions/EventTimestamps'
      geometry:
        $ref: '#/definitions/Geometry'
      audit:
        $ref: '#/definitions/Audit'
    required:
      - type
      - properties
      - geometry
  EventSource:
    type: string
    description: The provider of the traffic records and updates
    #$ref: 'dictionary.json#/eventSources' #external api
    example: waze
  EventType:
    type: string
    description: The class that refers to the specific event that occurs
    #$ref: 'dictionary.json#/eventTypes' #external api
    example: alert
  EventName:
    type: string
    description: The TMDD label of the event
    #$ref: 'dictionary.json#/eventNames' #external api
    example: alert hazard on road car stopped street
  EventDescription:
    type: object
    properties:
      code:
        type: number
        description: The TMDD event description code
        #$ref: 'dictionary.json#/eventDescriptionCodes' #external api
        example: 39
      text:
        type: string
        description: The TMDD event description label
        #$ref: 'dictionary.json#/eventDescriptionTexts' #external api
        example: stalled vehicule
  EventPriority:
    type: number
    description: The TMDD normalized priority ranking
    example: 10
    maxLength: 2
    minLength: 1
    pattern: '^[1-10]*$'
  EventSeverity:
    type: number
    description: The TMDD normalized severity ranking
    example: 5
    maxLength: 1
    minLength: 1
    pattern: '^[1-5]*$'
  EventTimestamps:
    type: object
    description: To keep track of the event throughout its lifecycle
    properties:
      startDate:
        $ref: '#/definitions/Timestamp'
      lastUpdate:
        $ref: '#/definitions/Timestamp'
      endDate:
        $ref: '#/definitions/Timestamp'
  Audit:
    type: object
    description: Audit fields following vdm standard
    properties:
      createdAt:
        $ref: '#/definitions/Timestamp'
      createdBy:
        $ref: '#/definitions/Author'
      lastModifiedAt:
        $ref: '#/definitions/Timestamp'
      lastModifiedBy:
        $ref: '#/definitions/Author'
      expiredAt:
        $ref: '#/definitions/Timestamp'
      expiredBy:
        $ref: '#/definitions/Author'
  Author:
    type: object
    properties:
      inum:
        type: string
        description: The id of the identity
        pattern: '^[\.@!0-9a-fA-Z]*$'
        example: 2819c223-7f76-453a-919d-413861904646
  ObjectId:
    type: string
    description: MongoDB ObjectID
    example: 507f191e810c19729de860ea
    maxLength: 24
    minLength: 24
    pattern: '^[0-9a-f]*$'
  Geometry:
    properties:
      type:
        $ref: '#/definitions/GeometryType'
      coordinates:
        allOf:
          - type: array
            description: Point
            items:
              type: number
              example: '-73.659846, 45.432088'
              minimum: -73.9058
              maximum: 45.7029
            minItems: 1
            maxItems: 1
          - type: array
            description: 'LineString, Polygon'
            items:
              type: array
              items:
                type: number
                example: '-73.659846, 45.432088'
                minimum: -73.9058
                maximum: 45.7029
              minItems: 1
              maxItems: 1
            minItems: 2
  GeometryType:
    type: string
    description: The type of the feature's geometry
    enum:
      - Point
      - LineString
      - Polygon
  Timestamp:
    type: string
    format: date-time
    example: '2018-05-13T08:42:34Z'
  Address:
    type: object
    properties:
      houseNumber:
        type: number
        example: 234
      local:
        type: boolean
        example: true
      street:
        type: object
        properties:
          streetType:
            $ref: '#/definitions/LocalizedString'
          streetLink:
            type: number
          direction:
            $ref: '#/definitions/LocalizedString'
      city:
        type: object
        properties:
          id:
            type: number
          name:
            $ref: '#/definitions/LocalizedString'
      fullStreetName:
        $ref: '#/definitions/LocalizedString'
      postalCode:
        type: string
        pattern: '^([0-9A-Z]{3})\ ([0-9A-Z]{3})$'
        example: H13 2B9
      borough:
        type: object
        properties:
          id:
            type: number
          name:
            $ref: '#/definitions/LocalizedString'
      coordinates:
        type: object
        properties:
          lat:
            type: number
            example: 45.432085
          long:
            type: number
            example: -73.659847
      humanReadableCode:
        $ref: '#/definitions/LocalizedString'
      isActive:
        type: boolean
        example: true
      isCertified:
        type: boolean
        example: true
  RoadSection:
    type: object
    properties:
      id:
        type: number
        example: 1
      name:
        type: string
        example: Rue Beauchamp
      shortName:
        type: string
        example: Beauchamp
      fromName:
        type: string
        example: Rue Saint-Patrick
      fromShortName:
        type: string
        example: Saint-Patrick
      toName:
        type: string
        example: Avenue Stirling
      toShortName:
        type: string
        example: Avenue Stirling
      scanDirection:
        type: number
        example: -1
      classification:
        type: number
        example: 1
      cityName:
        type: string
        example: Montreal
      cityId:
        type: number
        example: 50
  LocalizedString:
    type: object
    properties:
      fr-CA:
        type: string
      en-CA:
        type: string
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /mmohamed/traffic-event_api/1.0.0
schemes:
 - https