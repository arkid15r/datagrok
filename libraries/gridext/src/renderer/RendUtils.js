import * as TextUtils from "../utils/TextUtils";
export function renderXYCenteredText(str, g, nX, nY, nW, nH, strFont, strCrFore) {
    str = TextUtils.trimText(str, g, nW);
    if (strFont !== null && strFont !== undefined && strFont !== '') {
        g.font = strFont;
    }
    let tm = g.measureText(str);
    const nWLabel = Math.round(tm.width);
    const nYInset = 2;
    tm = g.measureText('W');
    const nAscent = Math.abs(tm.actualBoundingBoxAscent);
    const nDescent = tm.actualBoundingBoxDescent;
    const nHFont = nAscent + nDescent + 2 * nYInset;
    const nDeltaY = Math.floor((nH - nHFont) / 2);
    const nYY = nY + nDeltaY + nHFont;
    const strBaseOld = g.textBaseline;
    g.textBaseline = 'top';
    const nXX = nX + Math.floor((nW - nWLabel) / 2);
    g.textAlign = 'start';
    g.fillStyle = strCrFore !== undefined ? strCrFore : 'black';
    g.fillText(str, nXX, nYY - nHFont + nYInset);
    g.textBaseline = strBaseOld;
}
export function renderXCenteredText(str, g, nX, nY, nW, nH, strFont, strCrFore) {
    if (strFont !== null && strFont !== undefined && strFont !== '') {
        g.font = strFont;
    }
    let tm = g.measureText(str);
    const nWLabel = Math.round(tm.width);
    // const nYInset = 2;
    tm = g.measureText('W');
    const nAscent = Math.abs(tm.actualBoundingBoxAscent);
    const nDescent = tm.actualBoundingBoxDescent;
    const nHFont = nAscent + nDescent; // + 2 * nYInset;
    //const nDeltaY : number = Math.floor((nH - nHFont) / 2);
    //const nYY = nY + nDeltaY + nHFont;
    const strBaseOld = g.textBaseline;
    g.textBaseline = 'top';
    const nXX = nX + Math.floor((nW - nWLabel) / 2);
    g.textAlign = 'start';
    g.fillStyle = strCrFore !== undefined ? strCrFore : 'black';
    g.fillText(str, nXX, nY /*- nHFont*/);
    g.textBaseline = strBaseOld;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVuZFV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUmVuZFV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxTQUFTLE1BQU0sb0JBQW9CLENBQUM7QUFFaEQsTUFBTSxVQUFVLG9CQUFvQixDQUFDLEdBQVksRUFBRSxDQUE0QixFQUFFLEVBQVcsRUFBRSxFQUFXLEVBQUUsRUFBVyxFQUFFLEVBQVcsRUFBRSxPQUFnQixFQUFFLFNBQWtCO0lBQ3ZLLEdBQUcsR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFckMsSUFBSSxPQUFPLEtBQUssSUFBSSxJQUFJLE9BQU8sS0FBSyxTQUFTLElBQUksT0FBTyxLQUFLLEVBQUUsRUFBRTtRQUMvRCxDQUFDLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQztLQUNsQjtJQUNELElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0lBQ2xCLEVBQUUsR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDckQsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLHdCQUF3QixDQUFDO0lBQzdDLE1BQU0sTUFBTSxHQUFZLE9BQU8sR0FBRyxRQUFRLEdBQUcsQ0FBQyxHQUFHLE9BQU8sQ0FBQztJQUV6RCxNQUFNLE9BQU8sR0FBWSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3ZELE1BQU0sR0FBRyxHQUFHLEVBQUUsR0FBRyxPQUFPLEdBQUcsTUFBTSxDQUFDO0lBQ2xDLE1BQU0sVUFBVSxHQUFHLENBQUMsQ0FBQyxZQUFZLENBQUM7SUFDbEMsQ0FBQyxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7SUFDdkIsTUFBTSxHQUFHLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFaEQsQ0FBQyxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUM7SUFDdEIsQ0FBQyxDQUFDLFNBQVMsR0FBRyxTQUFTLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUM1RCxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxHQUFHLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQztJQUM3QyxDQUFDLENBQUMsWUFBWSxHQUFHLFVBQVUsQ0FBQztBQUM5QixDQUFDO0FBR0QsTUFBTSxVQUFVLG1CQUFtQixDQUFDLEdBQVksRUFBRSxDQUE0QixFQUFFLEVBQVcsRUFBRSxFQUFXLEVBQUUsRUFBVyxFQUFFLEVBQVcsRUFBRSxPQUFnQixFQUFFLFNBQWtCO0lBRXRLLElBQUksT0FBTyxLQUFLLElBQUksSUFBSSxPQUFPLEtBQUssU0FBUyxJQUFJLE9BQU8sS0FBSyxFQUFFLEVBQUU7UUFDL0QsQ0FBQyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUM7S0FDbEI7SUFDRCxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RDLHFCQUFxQjtJQUNwQixFQUFFLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN4QixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQ3JELE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQztJQUM3QyxNQUFNLE1BQU0sR0FBWSxPQUFPLEdBQUcsUUFBUSxDQUFDLENBQUEsaUJBQWlCO0lBRTVELHlEQUF5RDtJQUN6RCxvQ0FBb0M7SUFDcEMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxDQUFDLFlBQVksQ0FBQztJQUNsQyxDQUFDLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztJQUN2QixNQUFNLEdBQUcsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUVoRCxDQUFDLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQztJQUN0QixDQUFDLENBQUMsU0FBUyxHQUFHLFNBQVMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO0lBQzVELENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDdEMsQ0FBQyxDQUFDLFlBQVksR0FBRyxVQUFVLENBQUM7QUFDOUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFRleHRVdGlscyBmcm9tIFwiLi4vdXRpbHMvVGV4dFV0aWxzXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyWFlDZW50ZXJlZFRleHQoc3RyIDogc3RyaW5nLCBnIDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBuWCA6IG51bWJlciwgblkgOiBudW1iZXIsIG5XIDogbnVtYmVyLCBuSCA6IG51bWJlciwgc3RyRm9udCA6IHN0cmluZywgc3RyQ3JGb3JlIDogc3RyaW5nKSA6IHZvaWQge1xyXG4gIHN0ciA9IFRleHRVdGlscy50cmltVGV4dChzdHIsIGcsIG5XKTtcclxuXHJcbiAgaWYgKHN0ckZvbnQgIT09IG51bGwgJiYgc3RyRm9udCAhPT0gdW5kZWZpbmVkICYmIHN0ckZvbnQgIT09ICcnKSB7XHJcbiAgICBnLmZvbnQgPSBzdHJGb250O1xyXG4gIH1cclxuICBsZXQgdG0gPSBnLm1lYXN1cmVUZXh0KHN0cik7XHJcbiAgY29uc3QgbldMYWJlbCA9IE1hdGgucm91bmQodG0ud2lkdGgpO1xyXG4gIGNvbnN0IG5ZSW5zZXQgPSAyO1xyXG4gIHRtID0gZy5tZWFzdXJlVGV4dCgnVycpO1xyXG4gIGNvbnN0IG5Bc2NlbnQgPSBNYXRoLmFicyh0bS5hY3R1YWxCb3VuZGluZ0JveEFzY2VudCk7XHJcbiAgY29uc3QgbkRlc2NlbnQgPSB0bS5hY3R1YWxCb3VuZGluZ0JveERlc2NlbnQ7XHJcbiAgY29uc3QgbkhGb250IDogbnVtYmVyID0gbkFzY2VudCArIG5EZXNjZW50ICsgMiAqIG5ZSW5zZXQ7XHJcblxyXG4gIGNvbnN0IG5EZWx0YVkgOiBudW1iZXIgPSBNYXRoLmZsb29yKChuSCAtIG5IRm9udCkgLyAyKTtcclxuICBjb25zdCBuWVkgPSBuWSArIG5EZWx0YVkgKyBuSEZvbnQ7XHJcbiAgY29uc3Qgc3RyQmFzZU9sZCA9IGcudGV4dEJhc2VsaW5lO1xyXG4gIGcudGV4dEJhc2VsaW5lID0gJ3RvcCc7XHJcbiAgY29uc3QgblhYID0gblggKyBNYXRoLmZsb29yKChuVyAtIG5XTGFiZWwpIC8gMik7XHJcblxyXG4gIGcudGV4dEFsaWduID0gJ3N0YXJ0JztcclxuICBnLmZpbGxTdHlsZSA9IHN0ckNyRm9yZSAhPT0gdW5kZWZpbmVkID8gc3RyQ3JGb3JlIDogJ2JsYWNrJztcclxuICBnLmZpbGxUZXh0KHN0ciwgblhYLCBuWVkgLSBuSEZvbnQgKyBuWUluc2V0KTtcclxuICBnLnRleHRCYXNlbGluZSA9IHN0ckJhc2VPbGQ7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyWENlbnRlcmVkVGV4dChzdHIgOiBzdHJpbmcsIGcgOiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIG5YIDogbnVtYmVyLCBuWSA6IG51bWJlciwgblcgOiBudW1iZXIsIG5IIDogbnVtYmVyLCBzdHJGb250IDogc3RyaW5nLCBzdHJDckZvcmUgOiBzdHJpbmcpIDogdm9pZCB7XHJcblxyXG4gIGlmIChzdHJGb250ICE9PSBudWxsICYmIHN0ckZvbnQgIT09IHVuZGVmaW5lZCAmJiBzdHJGb250ICE9PSAnJykge1xyXG4gICAgZy5mb250ID0gc3RyRm9udDtcclxuICB9XHJcbiAgbGV0IHRtID0gZy5tZWFzdXJlVGV4dChzdHIpO1xyXG4gIGNvbnN0IG5XTGFiZWwgPSBNYXRoLnJvdW5kKHRtLndpZHRoKTtcclxuIC8vIGNvbnN0IG5ZSW5zZXQgPSAyO1xyXG4gIHRtID0gZy5tZWFzdXJlVGV4dCgnVycpO1xyXG4gIGNvbnN0IG5Bc2NlbnQgPSBNYXRoLmFicyh0bS5hY3R1YWxCb3VuZGluZ0JveEFzY2VudCk7XHJcbiAgY29uc3QgbkRlc2NlbnQgPSB0bS5hY3R1YWxCb3VuZGluZ0JveERlc2NlbnQ7XHJcbiAgY29uc3QgbkhGb250IDogbnVtYmVyID0gbkFzY2VudCArIG5EZXNjZW50Oy8vICsgMiAqIG5ZSW5zZXQ7XHJcblxyXG4gIC8vY29uc3QgbkRlbHRhWSA6IG51bWJlciA9IE1hdGguZmxvb3IoKG5IIC0gbkhGb250KSAvIDIpO1xyXG4gIC8vY29uc3QgbllZID0gblkgKyBuRGVsdGFZICsgbkhGb250O1xyXG4gIGNvbnN0IHN0ckJhc2VPbGQgPSBnLnRleHRCYXNlbGluZTtcclxuICBnLnRleHRCYXNlbGluZSA9ICd0b3AnO1xyXG4gIGNvbnN0IG5YWCA9IG5YICsgTWF0aC5mbG9vcigoblcgLSBuV0xhYmVsKSAvIDIpO1xyXG5cclxuICBnLnRleHRBbGlnbiA9ICdzdGFydCc7XHJcbiAgZy5maWxsU3R5bGUgPSBzdHJDckZvcmUgIT09IHVuZGVmaW5lZCA/IHN0ckNyRm9yZSA6ICdibGFjayc7XHJcbiAgZy5maWxsVGV4dChzdHIsIG5YWCwgblkgLyotIG5IRm9udCovKTtcclxuICBnLnRleHRCYXNlbGluZSA9IHN0ckJhc2VPbGQ7XHJcbn1cclxuIl19