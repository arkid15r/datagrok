import * as DG from 'datagrok-api/dg';
import * as grok from 'datagrok-api/grok';
import * as rxjs from 'rxjs';
import * as GridUtils from '../utils/GridUtils';
import { GridCellRendererEx } from "./GridCellRendererEx";
function getRenderer(colGrid) {
    //const colGrid = cellGrid.gridColumn;
    if (colGrid === null || colGrid === undefined) {
        throw new Error('Grid cell is detached from the Grid column');
    }
    let renderer = GridUtils.getGridColumnRenderer(colGrid);
    if (renderer !== null) {
        return renderer;
    }
    //renderer = cellGrid.renderer;
    //return renderer;
    return null;
}
function convertToCellXY(arXY, cellGrid, e) {
    const grid = cellGrid.grid;
    const colG = cellGrid.gridColumn;
    const sbHorz = grid.horzScroll;
    const nXOnCell = e.offsetX - colG.left + Math.floor(sbHorz.min);
    const nHColHeader = GridUtils.getGridColumnHeaderHeight(grid);
    const nHRow = GridUtils.getGridRowHeight(grid);
    const nYOnCell = e.offsetY - nHColHeader - nHRow * (cellGrid.gridRow - Math.floor(grid.vertScroll.min));
    arXY[0] = nXOnCell;
    arXY[1] = nYOnCell;
}
class RendererUIManagerImpl {
    constructor(grid) {
        this.m_grid = grid;
        const dart = DG.toDart(grid);
        dart.m_managerUIRenderer = this;
        this.m_handlerCellRender = grid.onCellRender.subscribe((args) => {
            if (args.cell.isTableCell) {
                const renderer = args.cell.gridColumn === null ? null : GridUtils.getGridColumnRenderer(args.cell.gridColumn);
                if (renderer !== null) {
                    renderer.render(args.g, args.bounds.x, args.bounds.y, args.bounds.width, args.bounds.height, args.cell, args.cell.style);
                    args.preventDefault();
                }
            }
        });
        this.m_handlerColResized = grid.onColumnResized.subscribe((ev) => {
            const colGrid = ev.args.column;
            const renderer = getRenderer(colGrid);
            if (renderer !== null) {
                const grid = colGrid.grid;
                const bAdjusting = ev.args.dragging;
                const nW = colGrid.width;
                renderer.onResizeWidth(colGrid, grid, nW, bAdjusting);
            }
        });
        const arColRowIdxs = new Array(4);
        this.m_handlerRowResized = grid.onRowsResized.subscribe((ev) => {
            const bAdjusting = ev.args.dragging;
            GridUtils.fillVisibleViewportGridCells(arColRowIdxs, grid);
            const nHRow = GridUtils.getGridRowHeight(grid);
            const nColMin = arColRowIdxs[0];
            const nColMax = arColRowIdxs[1];
            let colGrid = null;
            let renderer = null;
            //console.log("Requesting cols " + nColMin + " " + nColMax + " for " + nHRow);
            let nColVisited = 0;
            for (let nCol = nColMin; nCol <= nColMax; ++nCol) {
                if (nCol === 0)
                    continue;
                colGrid = grid.columns.byIndex(nCol);
                if (colGrid === null || !colGrid.visible)
                    continue;
                renderer = getRenderer(colGrid);
                if (renderer === null)
                    continue;
                renderer.onResizeHeight(colGrid, grid, nHRow, bAdjusting);
                ++nColVisited;
            }
            //grok.shell.info("Resizing row height: " + (ev.args.dragging ? "in progress" : "done"));
        });
        const arXY = [-1, -1];
        let nXDown = -1;
        let nYDown = -1;
        this.m_handlerMouseDown = rxjs.fromEvent(grid.overlay, 'mousedown').subscribe((e) => {
            const eMouse = e;
            const cell = grid.hitTest(eMouse.offsetX, eMouse.offsetY);
            if (cell === null || cell === undefined || cell.dart === undefined || !cell.isTableCell || cell.gridColumn === null) {
                return;
            }
            const renderer = getRenderer(cell.gridColumn);
            if (renderer instanceof GridCellRendererEx) {
                convertToCellXY(arXY, cell, eMouse);
                renderer.onMouseDownEx(cell, eMouse, arXY[0], arXY[1]);
            }
            nXDown = eMouse.offsetX;
            nYDown = eMouse.offsetY;
        });
        this.m_handlerMouseUp = rxjs.fromEvent(grid.overlay, 'mouseup').subscribe((e) => {
            const eMouse = e;
            const cell = grid.hitTest(eMouse.offsetX, eMouse.offsetY);
            if (cell === null || cell === undefined || cell.dart === undefined || !cell.isTableCell || cell.gridColumn === null) {
                return;
            }
            const renderer = getRenderer(cell.gridColumn);
            if (renderer instanceof GridCellRendererEx) {
                convertToCellXY(arXY, cell, eMouse);
                renderer.onMouseUpEx(cell, eMouse, arXY[0], arXY[1]);
            }
        });
        this.m_handlerClick = rxjs.fromEvent(grid.overlay, 'click').subscribe((e) => {
            const eMouse = e;
            const cell = grid.hitTest(eMouse.offsetX, eMouse.offsetY);
            if (cell === null || cell === undefined || cell.dart === undefined || !cell.isTableCell || cell.gridColumn === null) {
                return;
            }
            if (nXDown === eMouse.offsetX && nYDown === eMouse.offsetY) {
                const renderer = getRenderer(cell.gridColumn);
                if (renderer instanceof GridCellRendererEx) {
                    convertToCellXY(arXY, cell, eMouse);
                    renderer.onClickEx(cell, eMouse, arXY[0], arXY[1]);
                }
            }
            nXDown = -1;
            nYDown = -1;
        });
        let cellCurrent = null;
        this.m_handlerMouseMove = rxjs.fromEvent(grid.overlay, 'mousemove').subscribe((e) => {
            const eMouse = e;
            let cell = grid.hitTest(eMouse.offsetX, eMouse.offsetY);
            if (cell === null || cell === undefined || cell.dart === undefined || !cell.isTableCell || cell.gridColumn === null) {
                cell = null;
            }
            if (cellCurrent === null && cell != null) {
                const renderer = getRenderer(cell.gridColumn);
                if (renderer instanceof GridCellRendererEx) {
                    convertToCellXY(arXY, cell, eMouse);
                    renderer.onMouseEnterEx(cell, eMouse, arXY[0], arXY[1]);
                }
            }
            if (cellCurrent !== null && cellCurrent.gridColumn !== null && (cell === null || cellCurrent.gridColumn.name !== cell.gridColumn.name || cellCurrent.gridRow !== cell.gridRow)) {
                const renderer = getRenderer(cellCurrent.gridColumn);
                if (renderer instanceof GridCellRendererEx) {
                    convertToCellXY(arXY, cellCurrent, eMouse);
                    renderer.onMouseLeaveEx(cellCurrent, eMouse, arXY[0], arXY[1]);
                }
                //onMouseEvent(e, cellCurrent, 'onMouseLeave');
                if (cell !== null && cell.gridColumn !== null) {
                    const renderer = getRenderer(cell.gridColumn);
                    if (renderer instanceof GridCellRendererEx) {
                        convertToCellXY(arXY, cell, eMouse);
                        renderer.onMouseEnterEx(cell, eMouse, arXY[0], arXY[1]);
                    }
                    //onMouseEvent(e, cell, 'onMouseEnter');
                }
            }
            if (cell !== null && cell.gridColumn !== null) {
                const renderer = getRenderer(cell.gridColumn);
                if (renderer instanceof GridCellRendererEx) {
                    convertToCellXY(arXY, cell, eMouse);
                    renderer.onMouseMoveEx(cell, eMouse, arXY[0], arXY[1]);
                }
            }
            cellCurrent = cell;
        });
        this.m_handlerMouseOut = rxjs.fromEvent(grid.overlay, 'mouseout').subscribe((e) => {
            if (cellCurrent !== null && cellCurrent.gridColumn !== null) {
                const renderer = getRenderer(cellCurrent.gridColumn);
                if (renderer instanceof GridCellRendererEx) {
                    const eMouse = e;
                    convertToCellXY(arXY, cellCurrent, eMouse);
                    renderer.onMouseLeaveEx(cellCurrent, eMouse, arXY[0], arXY[1]);
                }
            }
            cellCurrent = null;
        });
        const managerThis = this;
        this.m_handlerViewerClosed = grok.events.onViewerClosed.subscribe((args) => {
            const viewer = args.args.viewer;
            if (DG.toDart(viewer) === DG.toDart(this.m_grid)) {
                if (this.m_grid === null)
                    throw new Error("Grid cannot be null.");
                managerThis.dispose();
            }
        });
    }
    dispose() {
        this.m_handlerCellRender.unsubscribe();
        this.m_handlerCellRender = null;
        this.m_handlerColResized.unsubscribe();
        this.m_handlerColResized = null;
        this.m_handlerRowResized.unsubscribe();
        this.m_handlerRowResized = null;
        this.m_handlerMouseDown.unsubscribe();
        this.m_handlerMouseDown = null;
        this.m_handlerMouseUp.unsubscribe();
        this.m_handlerMouseUp = null;
        this.m_handlerClick.unsubscribe();
        this.m_handlerClick = null;
        this.m_handlerMouseMove.unsubscribe();
        this.m_handlerMouseMove = null;
        this.m_handlerMouseOut.unsubscribe();
        this.m_handlerMouseOut = null;
        this.m_handlerViewerClosed.unsubscribe();
        this.m_handlerViewerClosed = null;
        const dart = DG.toDart(this.m_grid);
        dart.m_managerUIRenderer = null;
        this.m_grid = null;
    }
}
export class RendererUIManager {
    constructor() {
        throw new Error("Cannot create instances of the RendererUIManager class");
    }
    static isRegistered(grid) {
        const dart = DG.toDart(grid);
        const b = dart.m_managerUIRenderer instanceof RendererUIManagerImpl;
        return b;
    }
    static register(grid) {
        if (RendererUIManager.isRegistered(grid)) {
            return false;
        }
        const manager = new RendererUIManagerImpl(grid);
        return true;
    }
    static unregister(grid) {
        if (!RendererUIManager.isRegistered(grid)) {
            return false;
        }
        const dart = DG.toDart(grid);
        const manager = dart.m_managerUIRenderer;
        manager.dispose();
        return true;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVuZGVyZXJVSU1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJSZW5kZXJlclVJTWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3RDLE9BQU8sS0FBSyxJQUFJLE1BQU0sbUJBQW1CLENBQUM7QUFDMUMsT0FBTyxLQUFLLElBQUksTUFBTSxNQUFNLENBQUM7QUFDN0IsT0FBTyxLQUFLLFNBQVMsTUFBTSxvQkFBb0IsQ0FBQztBQUNoRCxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUV4RCxTQUFTLFdBQVcsQ0FBQyxPQUF1QjtJQUMxQyxzQ0FBc0M7SUFDdEMsSUFBSSxPQUFPLEtBQUssSUFBSSxJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUU7UUFDN0MsTUFBTSxJQUFJLEtBQUssQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO0tBQy9EO0lBRUQsSUFBSSxRQUFRLEdBQStCLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNwRixJQUFHLFFBQVEsS0FBSyxJQUFJLEVBQUU7UUFDcEIsT0FBTyxRQUFRLENBQUM7S0FDakI7SUFFRCwrQkFBK0I7SUFDL0Isa0JBQWtCO0lBQ2xCLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFDLElBQW9CLEVBQUUsUUFBc0IsRUFBRSxDQUFjO0lBQ25GLE1BQU0sSUFBSSxHQUFhLFFBQVEsQ0FBQyxJQUFJLENBQUM7SUFDckMsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQztJQUNqQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQy9CLE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJ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LEtBQUssQ0FBQztTQUNkO1FBRUQsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUM7UUFDekMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2xCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgREcgZnJvbSAnZGF0YWdyb2stYXBpL2RnJztcclxuaW1wb3J0ICogYXMgZ3JvayBmcm9tICdkYXRhZ3Jvay1hcGkvZ3Jvayc7XHJcbmltcG9ydCAqIGFzIHJ4anMgZnJvbSAncnhqcyc7XHJcbmltcG9ydCAqIGFzIEdyaWRVdGlscyBmcm9tICcuLi91dGlscy9HcmlkVXRpbHMnO1xyXG5pbXBvcnQge0dyaWRDZWxsUmVuZGVyZXJFeH0gZnJvbSBcIi4vR3JpZENlbGxSZW5kZXJlckV4XCI7XHJcblxyXG5mdW5jdGlvbiBnZXRSZW5kZXJlcihjb2xHcmlkIDogREcuR3JpZENvbHVtbikgOiBHcmlkQ2VsbFJlbmRlcmVyRXggfCBudWxsIHtcclxuICAvL2NvbnN0IGNvbEdyaWQgPSBjZWxsR3JpZC5ncmlkQ29sdW1uO1xyXG4gIGlmIChjb2xHcmlkID09PSBudWxsIHx8IGNvbEdyaWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdHcmlkIGNlbGwgaXMgZGV0YWNoZWQgZnJvbSB0aGUgR3JpZCBjb2x1bW4nKTtcclxuICB9XHJcblxyXG4gIGxldCByZW5kZXJlciA6IEdyaWRDZWxsUmVuZGVyZXJFeCB8IG51bGwgPSBHcmlkVXRpbHMuZ2V0R3JpZENvbHVtblJlbmRlcmVyKGNvbEdyaWQpO1xyXG4gIGlmKHJlbmRlcmVyICE9PSBudWxsKSB7XHJcbiAgICByZXR1cm4gcmVuZGVyZXI7XHJcbiAgfVxyXG5cclxuICAvL3JlbmRlcmVyID0gY2VsbEdyaWQucmVuZGVyZXI7XHJcbiAgLy9yZXR1cm4gcmVuZGVyZXI7XHJcbiAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbnZlcnRUb0NlbGxYWShhclhZIDogQXJyYXk8bnVtYmVyPiwgY2VsbEdyaWQgOiBERy5HcmlkQ2VsbCwgZSA6IE1vdXNlRXZlbnQpIDogdm9pZCB7XHJcbiAgY29uc3QgZ3JpZCA6IERHLkdyaWQgPSBjZWxsR3JpZC5ncmlkO1xyXG4gIGNvbnN0IGNvbEcgPSBjZWxsR3JpZC5ncmlkQ29sdW1uO1xyXG4gIGNvbnN0IHNiSG9yeiA9IGdyaWQuaG9yelNjcm9sbDtcclxuICBjb25zdCBuWE9uQ2VsbCA9IGUub2Zmc2V0WCAtIGNvbEcubGVmdCArIE1hdGguZmxvb3Ioc2JIb3J6Lm1pbik7XHJcblxyXG4gIGNvbnN0IG5IQ29sSGVhZGVyID0gR3JpZFV0aWxzLmdldEdyaWRDb2x1bW5IZWFkZXJIZWlnaHQoZ3JpZCk7XHJcbiAgY29uc3QgbkhSb3cgPSBHcmlkVXRpbHMuZ2V0R3JpZFJvd0hlaWdodChncmlkKTtcclxuICBjb25zdCBuWU9uQ2VsbCA9IGUub2Zmc2V0WSAtIG5IQ29sSGVhZGVyIC0gbkhSb3cgKiAoY2VsbEdyaWQuZ3JpZFJvdyAtIE1hdGguZmxvb3IoZ3JpZC52ZXJ0U2Nyb2xsLm1pbikpO1xyXG4gIGFyWFlbMF0gPSBuWE9uQ2VsbDtcclxuICBhclhZWzFdID0gbllPbkNlbGw7XHJcbn1cclxuXHJcblxyXG5cclxuY2xhc3MgUmVuZGVyZXJVSU1hbmFnZXJJbXBsIHtcclxuICBjb25zdHJ1Y3RvcihncmlkIDogREcuR3JpZCkge1xyXG4gICAgdGhpcy5tX2dyaWQgPSBncmlkO1xyXG4gICAgY29uc3QgZGFydCA9IERHLnRvRGFydChncmlkKTtcclxuICAgIGRhcnQubV9tYW5hZ2VyVUlSZW5kZXJlciA9IHRoaXM7XHJcblxyXG4gICAgdGhpcy5tX2hhbmRsZXJDZWxsUmVuZGVyID0gZ3JpZC5vbkNlbGxSZW5kZXIuc3Vic2NyaWJlKChhcmdzKSA9PiB7XHJcblxyXG4gICAgICBpZiAoYXJncy5jZWxsLmlzVGFibGVDZWxsKSB7XHJcbiAgICAgICAgY29uc3QgcmVuZGVyZXIgPSBhcmdzLmNlbGwuZ3JpZENvbHVtbiA9PT0gbnVsbCA/IG51bGwgOiBHcmlkVXRpbHMuZ2V0R3JpZENvbHVtblJlbmRlcmVyKGFyZ3MuY2VsbC5ncmlkQ29sdW1uKTtcclxuICAgICAgICBpZihyZW5kZXJlciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgcmVuZGVyZXIucmVuZGVyKGFyZ3MuZywgYXJncy5ib3VuZHMueCwgYXJncy5ib3VuZHMueSwgYXJncy5ib3VuZHMud2lkdGgsIGFyZ3MuYm91bmRzLmhlaWdodCwgYXJncy5jZWxsLCBhcmdzLmNlbGwuc3R5bGUpO1xyXG4gICAgICAgICAgYXJncy5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5tX2hhbmRsZXJDb2xSZXNpemVkID0gZ3JpZC5vbkNvbHVtblJlc2l6ZWQuc3Vic2NyaWJlKChldikgPT4ge1xyXG5cclxuICAgICAgY29uc3QgY29sR3JpZCA9IGV2LmFyZ3MuY29sdW1uO1xyXG4gICAgICBjb25zdCByZW5kZXJlciA9IGdldFJlbmRlcmVyKGNvbEdyaWQpO1xyXG5cclxuICAgICAgaWYgKHJlbmRlcmVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgY29uc3QgZ3JpZCA9IGNvbEdyaWQuZ3JpZDtcclxuICAgICAgICBjb25zdCBiQWRqdXN0aW5nID0gZXYuYXJncy5kcmFnZ2luZztcclxuICAgICAgICBjb25zdCBuVyA9IGNvbEdyaWQud2lkdGg7XHJcbiAgICAgICAgcmVuZGVyZXIub25SZXNpemVXaWR0aChjb2xHcmlkLCBncmlkLCBuVywgYkFkanVzdGluZyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGFyQ29sUm93SWR4cyA9IG5ldyBBcnJheTxudW1iZXI+KDQpO1xyXG4gICAgdGhpcy5tX2hhbmRsZXJSb3dSZXNpemVkID0gZ3JpZC5vblJvd3NSZXNpemVkLnN1YnNjcmliZSgoZXYpID0+IHtcclxuXHJcbiAgICAgIGNvbnN0IGJBZGp1c3RpbmcgPSBldi5hcmdzLmRyYWdnaW5nO1xyXG4gICAgICBHcmlkVXRpbHMuZmlsbFZpc2libGVWaWV3cG9ydEdyaWRDZWxscyhhckNvbFJvd0lkeHMsIGdyaWQpO1xyXG5cclxuICAgICAgY29uc3QgbkhSb3cgPSBHcmlkVXRpbHMuZ2V0R3JpZFJvd0hlaWdodChncmlkKTtcclxuXHJcbiAgICAgIGNvbnN0IG5Db2xNaW4gPSBhckNvbFJvd0lkeHNbMF07XHJcbiAgICAgIGNvbnN0IG5Db2xNYXggPSBhckNvbFJvd0lkeHNbMV07XHJcblxyXG4gICAgICBsZXQgY29sR3JpZCA9IG51bGw7XHJcbiAgICAgIGxldCByZW5kZXJlcj0gbnVsbDtcclxuXHJcbiAgICAgIC8vY29uc29sZS5sb2coXCJSZXF1ZXN0aW5nIGNvbHMgXCIgKyBuQ29sTWluICsgXCIgXCIgKyBuQ29sTWF4ICsgXCIgZm9yIFwiICsgbkhSb3cpO1xyXG4gICAgICBsZXQgbkNvbFZpc2l0ZWQgPSAwO1xyXG4gICAgICBmb3IobGV0IG5Db2w9bkNvbE1pbjsgbkNvbDw9bkNvbE1heDsgKytuQ29sKSB7XHJcbiAgICAgICAgaWYobkNvbCA9PT0gMClcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICBjb2xHcmlkID0gZ3JpZC5jb2x1bW5zLmJ5SW5kZXgobkNvbCk7XHJcbiAgICAgICAgaWYoY29sR3JpZCA9PT0gbnVsbCB8fCAhY29sR3JpZC52aXNpYmxlKVxyXG4gICAgICAgICAgY29udGludWU7XHJcblxyXG4gICAgICAgIHJlbmRlcmVyID0gZ2V0UmVuZGVyZXIoY29sR3JpZCk7XHJcbiAgICAgICAgaWYocmVuZGVyZXIgPT09IG51bGwpXHJcbiAgICAgICAgICBjb250aW51ZTtcclxuXHJcbiAgICAgICAgcmVuZGVyZXIub25SZXNpemVIZWlnaHQoY29sR3JpZCwgZ3JpZCwgbkhSb3csIGJBZGp1c3RpbmcpO1xyXG4gICAgICAgICsrbkNvbFZpc2l0ZWQ7XHJcbiAgICAgIH1cclxuICAgICAgLy9ncm9rLnNoZWxsLmluZm8oXCJSZXNpemluZyByb3cgaGVpZ2h0OiBcIiArIChldi5hcmdzLmRyYWdnaW5nID8gXCJpbiBwcm9ncmVzc1wiIDogXCJkb25lXCIpKTtcclxuICAgIH0pO1xyXG5cclxuXHJcblxyXG4gICAgY29uc3QgYXJYWSA9IFstMSwtMV07XHJcbiAgICBsZXQgblhEb3duID0gLTE7XHJcbiAgICBsZXQgbllEb3duID0gLTE7XHJcbiAgICB0aGlzLm1faGFuZGxlck1vdXNlRG93biA9IHJ4anMuZnJvbUV2ZW50KGdyaWQub3ZlcmxheSwgJ21vdXNlZG93bicpLnN1YnNjcmliZSgoZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGVNb3VzZSA9IGUgYXMgTW91c2VFdmVudDtcclxuICAgICAgICBjb25zdCBjZWxsID0gZ3JpZC5oaXRUZXN0KGVNb3VzZS5vZmZzZXRYLCBlTW91c2Uub2Zmc2V0WSk7XHJcbiAgICAgICAgaWYgKGNlbGwgPT09IG51bGwgfHwgY2VsbCA9PT0gdW5kZWZpbmVkIHx8IGNlbGwuZGFydCA9PT0gdW5kZWZpbmVkIHx8ICFjZWxsLmlzVGFibGVDZWxsIHx8IGNlbGwuZ3JpZENvbHVtbiA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCByZW5kZXJlciA9IGdldFJlbmRlcmVyKGNlbGwuZ3JpZENvbHVtbik7XHJcbiAgICAgICAgaWYocmVuZGVyZXIgaW5zdGFuY2VvZiBHcmlkQ2VsbFJlbmRlcmVyRXgpIHtcclxuICAgICAgICAgIGNvbnZlcnRUb0NlbGxYWShhclhZLCBjZWxsLCBlTW91c2UpO1xyXG4gICAgICAgICAgcmVuZGVyZXIub25Nb3VzZURvd25FeChjZWxsLCBlTW91c2UsIGFyWFlbMF0sIGFyWFlbMV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBuWERvd24gPSBlTW91c2Uub2Zmc2V0WDtcclxuICAgICAgICBuWURvd24gPSBlTW91c2Uub2Zmc2V0WTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgdGhpcy5tX2hhbmRsZXJNb3VzZVVwID0gcnhqcy5mcm9tRXZlbnQoZ3JpZC5vdmVybGF5LCAnbW91c2V1cCcpLnN1YnNjcmliZSgoZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGVNb3VzZSA9IGUgYXMgTW91c2VFdmVudDtcclxuICAgICAgICBjb25zdCBjZWxsID0gZ3JpZC5oaXRUZXN0KGVNb3VzZS5vZmZzZXRYLCBlTW91c2Uub2Zmc2V0WSk7XHJcbiAgICAgICAgaWYgKGNlbGwgPT09IG51bGwgfHwgY2VsbCA9PT0gdW5kZWZpbmVkIHx8IGNlbGwuZGFydCA9PT0gdW5kZWZpbmVkIHx8ICFjZWxsLmlzVGFibGVDZWxsIHx8IGNlbGwuZ3JpZENvbHVtbiA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHJlbmRlcmVyID0gZ2V0UmVuZGVyZXIoY2VsbC5ncmlkQ29sdW1uKTtcclxuICAgICAgaWYocmVuZGVyZXIgaW5zdGFuY2VvZiBHcmlkQ2VsbFJlbmRlcmVyRXgpIHtcclxuICAgICAgICBjb252ZXJ0VG9DZWxsWFkoYXJYWSwgY2VsbCwgZU1vdXNlKTtcclxuICAgICAgICByZW5kZXJlci5vbk1vdXNlVXBFeChjZWxsLCBlTW91c2UsIGFyWFlbMF0sIGFyWFlbMV0pO1xyXG4gICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIHRoaXMubV9oYW5kbGVyQ2xpY2sgPSByeGpzLmZyb21FdmVudChncmlkLm92ZXJsYXksICdjbGljaycpLnN1YnNjcmliZSgoZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGVNb3VzZSA9IGUgYXMgTW91c2VFdmVudDtcclxuICAgICAgICBjb25zdCBjZWxsID0gZ3JpZC5oaXRUZXN0KGVNb3VzZS5vZmZzZXRYLCBlTW91c2Uub2Zmc2V0WSk7XHJcbiAgICAgICAgaWYgKGNlbGwgPT09IG51bGwgfHwgY2VsbCA9PT0gdW5kZWZpbmVkIHx8IGNlbGwuZGFydCA9PT0gdW5kZWZpbmVkIHx8ICFjZWxsLmlzVGFibGVDZWxsIHx8IGNlbGwuZ3JpZENvbHVtbiA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoblhEb3duID09PSBlTW91c2Uub2Zmc2V0WCAmJiBuWURvd24gPT09IGVNb3VzZS5vZmZzZXRZKSB7XHJcbiAgICAgICAgICBjb25zdCByZW5kZXJlciA9IGdldFJlbmRlcmVyKGNlbGwuZ3JpZENvbHVtbik7XHJcbiAgICAgICAgICBpZihyZW5kZXJlciBpbnN0YW5jZW9mIEdyaWRDZWxsUmVuZGVyZXJFeCkge1xyXG4gICAgICAgICAgICBjb252ZXJ0VG9DZWxsWFkoYXJYWSwgY2VsbCwgZU1vdXNlKTtcclxuICAgICAgICAgICAgcmVuZGVyZXIub25DbGlja0V4KGNlbGwsIGVNb3VzZSwgYXJYWVswXSwgYXJYWVsxXSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBuWERvd24gPSAtMTtcclxuICAgICAgICBuWURvd24gPSAtMTtcclxuICAgICAgfSk7XHJcbiAgICBsZXQgY2VsbEN1cnJlbnQgOiBERy5HcmlkQ2VsbCB8IG51bGwgPSBudWxsO1xyXG4gICAgdGhpcy5tX2hhbmRsZXJNb3VzZU1vdmUgPSByeGpzLmZyb21FdmVudChncmlkLm92ZXJsYXksICdtb3VzZW1vdmUnKS5zdWJzY3JpYmUoKGUpID0+IHtcclxuICAgICAgICBjb25zdCBlTW91c2UgPSBlIGFzIE1vdXNlRXZlbnQ7XHJcblxyXG4gICAgICAgIGxldCBjZWxsID0gZ3JpZC5oaXRUZXN0KGVNb3VzZS5vZmZzZXRYLCBlTW91c2Uub2Zmc2V0WSk7XHJcbiAgICAgICAgaWYgKGNlbGwgPT09IG51bGwgfHwgY2VsbCA9PT0gdW5kZWZpbmVkIHx8IGNlbGwuZGFydCA9PT0gdW5kZWZpbmVkIHx8ICFjZWxsLmlzVGFibGVDZWxsIHx8IGNlbGwuZ3JpZENvbHVtbiA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgY2VsbCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjZWxsQ3VycmVudCA9PT0gbnVsbCAmJiBjZWxsICE9IG51bGwpIHtcclxuICAgICAgICAgIGNvbnN0IHJlbmRlcmVyID0gZ2V0UmVuZGVyZXIoY2VsbC5ncmlkQ29sdW1uKTtcclxuICAgICAgICAgIGlmKHJlbmRlcmVyIGluc3RhbmNlb2YgR3JpZENlbGxSZW5kZXJlckV4KSB7XHJcbiAgICAgICAgICAgIGNvbnZlcnRUb0NlbGxYWShhclhZLCBjZWxsLCBlTW91c2UpO1xyXG4gICAgICAgICAgICByZW5kZXJlci5vbk1vdXNlRW50ZXJFeChjZWxsLCBlTW91c2UsIGFyWFlbMF0sIGFyWFlbMV0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNlbGxDdXJyZW50ICE9PSBudWxsICYmIGNlbGxDdXJyZW50LmdyaWRDb2x1bW4gIT09IG51bGwgJiYgKGNlbGwgPT09IG51bGwgfHwgY2VsbEN1cnJlbnQuZ3JpZENvbHVtbi5uYW1lICE9PSBjZWxsLmdyaWRDb2x1bW4ubmFtZSB8fCBjZWxsQ3VycmVudC5ncmlkUm93ICE9PSBjZWxsLmdyaWRSb3cpKSB7XHJcblxyXG4gICAgICAgICAgY29uc3QgcmVuZGVyZXIgPSBnZXRSZW5kZXJlcihjZWxsQ3VycmVudC5ncmlkQ29sdW1uKTtcclxuICAgICAgICAgIGlmKHJlbmRlcmVyIGluc3RhbmNlb2YgR3JpZENlbGxSZW5kZXJlckV4KSB7XHJcbiAgICAgICAgICAgIGNvbnZlcnRUb0NlbGxYWShhclhZLCBjZWxsQ3VycmVudCwgZU1vdXNlKTtcclxuICAgICAgICAgICAgcmVuZGVyZXIub25Nb3VzZUxlYXZlRXgoY2VsbEN1cnJlbnQsIGVNb3VzZSwgYXJYWVswXSwgYXJYWVsxXSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvL29uTW91c2VFdmVudChlLCBjZWxsQ3VycmVudCwgJ29uTW91c2VMZWF2ZScpO1xyXG4gICAgICAgICAgaWYgKGNlbGwgIT09IG51bGwgJiYgY2VsbC5ncmlkQ29sdW1uICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlbmRlcmVyID0gZ2V0UmVuZGVyZXIoY2VsbC5ncmlkQ29sdW1uKTtcclxuICAgICAgICAgICAgaWYocmVuZGVyZXIgaW5zdGFuY2VvZiBHcmlkQ2VsbFJlbmRlcmVyRXgpIHtcclxuICAgICAgICAgICAgICBjb252ZXJ0VG9DZWxsWFkoYXJYWSwgY2VsbCwgZU1vdXNlKTtcclxuICAgICAgICAgICAgICByZW5kZXJlci5vbk1vdXNlRW50ZXJFeChjZWxsLCBlTW91c2UsIGFyWFlbMF0sIGFyWFlbMV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vb25Nb3VzZUV2ZW50KGUsIGNlbGwsICdvbk1vdXNlRW50ZXInKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjZWxsICE9PSBudWxsICYmIGNlbGwuZ3JpZENvbHVtbiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgY29uc3QgcmVuZGVyZXIgPSBnZXRSZW5kZXJlcihjZWxsLmdyaWRDb2x1bW4pO1xyXG4gICAgICAgICAgaWYocmVuZGVyZXIgaW5zdGFuY2VvZiBHcmlkQ2VsbFJlbmRlcmVyRXgpIHtcclxuICAgICAgICAgICAgY29udmVydFRvQ2VsbFhZKGFyWFksIGNlbGwsIGVNb3VzZSk7XHJcbiAgICAgICAgICAgIHJlbmRlcmVyLm9uTW91c2VNb3ZlRXgoY2VsbCwgZU1vdXNlLCBhclhZWzBdLCBhclhZWzFdKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNlbGxDdXJyZW50ID0gY2VsbDtcclxuICAgICAgfSk7XHJcblxyXG4gICAgdGhpcy5tX2hhbmRsZXJNb3VzZU91dCA9IHJ4anMuZnJvbUV2ZW50KGdyaWQub3ZlcmxheSwgJ21vdXNlb3V0Jykuc3Vic2NyaWJlKChlKSA9PiB7XHJcbiAgICAgICAgaWYgKGNlbGxDdXJyZW50ICE9PSBudWxsICYmIGNlbGxDdXJyZW50LmdyaWRDb2x1bW4gIT09IG51bGwpIHtcclxuXHJcbiAgICAgICAgICBjb25zdCByZW5kZXJlciA9IGdldFJlbmRlcmVyKGNlbGxDdXJyZW50LmdyaWRDb2x1bW4pO1xyXG4gICAgICAgICAgaWYocmVuZGVyZXIgaW5zdGFuY2VvZiBHcmlkQ2VsbFJlbmRlcmVyRXgpIHtcclxuICAgICAgICAgICAgY29uc3QgZU1vdXNlID0gZSBhcyBNb3VzZUV2ZW50O1xyXG4gICAgICAgICAgICBjb252ZXJ0VG9DZWxsWFkoYXJYWSwgY2VsbEN1cnJlbnQsIGVNb3VzZSk7XHJcbiAgICAgICAgICAgIHJlbmRlcmVyLm9uTW91c2VMZWF2ZUV4KGNlbGxDdXJyZW50LCBlTW91c2UsIGFyWFlbMF0sIGFyWFlbMV0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2VsbEN1cnJlbnQgPSBudWxsO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICBjb25zdCBtYW5hZ2VyVGhpcyA9IHRoaXM7XHJcbiAgICB0aGlzLm1faGFuZGxlclZpZXdlckNsb3NlZCA9IGdyb2suZXZlbnRzLm9uVmlld2VyQ2xvc2VkLnN1YnNjcmliZSgoYXJncykgPT4ge1xyXG4gICAgICBjb25zdCB2aWV3ZXIgPSBhcmdzLmFyZ3Mudmlld2VyO1xyXG4gICAgICBpZihERy50b0RhcnQodmlld2VyKSA9PT0gREcudG9EYXJ0KHRoaXMubV9ncmlkKSl7XHJcbiAgICAgICAgaWYodGhpcy5tX2dyaWQgPT09IG51bGwpXHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHcmlkIGNhbm5vdCBiZSBudWxsLlwiKTtcclxuXHJcbiAgICAgICAgbWFuYWdlclRoaXMuZGlzcG9zZSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSA6IHZvaWQge1xyXG5cclxuICAgIHRoaXMubV9oYW5kbGVyQ2VsbFJlbmRlci51bnN1YnNjcmliZSgpO1xyXG4gICAgdGhpcy5tX2hhbmRsZXJDZWxsUmVuZGVyID0gbnVsbDtcclxuXHJcbiAgICB0aGlzLm1faGFuZGxlckNvbFJlc2l6ZWQudW5zdWJzY3JpYmUoKTtcclxuICAgIHRoaXMubV9oYW5kbGVyQ29sUmVzaXplZCA9IG51bGw7XHJcblxyXG4gICAgdGhpcy5tX2hhbmRsZXJSb3dSZXNpemVkLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB0aGlzLm1faGFuZGxlclJvd1Jlc2l6ZWQgPSBudWxsO1xyXG5cclxuICAgIHRoaXMubV9oYW5kbGVyTW91c2VEb3duLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB0aGlzLm1faGFuZGxlck1vdXNlRG93biA9IG51bGw7XHJcblxyXG4gICAgdGhpcy5tX2hhbmRsZXJNb3VzZVVwLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB0aGlzLm1faGFuZGxlck1vdXNlVXAgPSBudWxsO1xyXG5cclxuICAgIHRoaXMubV9oYW5kbGVyQ2xpY2sudW5zdWJzY3JpYmUoKTtcclxuICAgIHRoaXMubV9oYW5kbGVyQ2xpY2sgPSBudWxsO1xyXG5cclxuICAgIHRoaXMubV9oYW5kbGVyTW91c2VNb3ZlLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB0aGlzLm1faGFuZGxlck1vdXNlTW92ZSA9IG51bGw7XHJcblxyXG4gICAgdGhpcy5tX2hhbmRsZXJNb3VzZU91dC51bnN1YnNjcmliZSgpO1xyXG4gICAgdGhpcy5tX2hhbmRsZXJNb3VzZU91dCA9IG51bGw7XHJcblxyXG4gICAgdGhpcy5tX2hhbmRsZXJWaWV3ZXJDbG9zZWQudW5zdWJzY3JpYmUoKTtcclxuICAgIHRoaXMubV9oYW5kbGVyVmlld2VyQ2xvc2VkID0gbnVsbDtcclxuXHJcbiAgICBjb25zdCBkYXJ0ID0gREcudG9EYXJ0KHRoaXMubV9ncmlkKTtcclxuICAgIGRhcnQubV9tYW5hZ2VyVUlSZW5kZXJlciA9IG51bGw7XHJcbiAgICB0aGlzLm1fZ3JpZCA9IG51bGw7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG1fZ3JpZCA6IERHLkdyaWQgfCBudWxsO1xyXG4gIHByaXZhdGUgbV9oYW5kbGVyQ2VsbFJlbmRlciA6IGFueTtcclxuICBwcml2YXRlIG1faGFuZGxlckNvbFJlc2l6ZWQ6IGFueTtcclxuICBwcml2YXRlIG1faGFuZGxlclJvd1Jlc2l6ZWQ6IGFueTtcclxuICBwcml2YXRlIG1faGFuZGxlck1vdXNlRG93biA6IGFueTtcclxuICBwcml2YXRlIG1faGFuZGxlck1vdXNlVXAgOiBhbnk7XHJcbiAgcHJpdmF0ZSBtX2hhbmRsZXJDbGljayA6IGFueTtcclxuICBwcml2YXRlIG1faGFuZGxlck1vdXNlTW92ZSA6IGFueTtcclxuICBwcml2YXRlIG1faGFuZGxlck1vdXNlT3V0IDogYW55O1xyXG4gIHByaXZhdGUgbV9oYW5kbGVyVmlld2VyQ2xvc2VkOiBhbnk7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBSZW5kZXJlclVJTWFuYWdlciB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY3JlYXRlIGluc3RhbmNlcyBvZiB0aGUgUmVuZGVyZXJVSU1hbmFnZXIgY2xhc3NcIik7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaXNSZWdpc3RlcmVkKGdyaWQgOiBERy5HcmlkKSA6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgZGFydCA9IERHLnRvRGFydChncmlkKTtcclxuICAgIGNvbnN0IGIgPSBkYXJ0Lm1fbWFuYWdlclVJUmVuZGVyZXIgaW5zdGFuY2VvZiBSZW5kZXJlclVJTWFuYWdlckltcGw7XHJcbiAgICByZXR1cm4gYjtcclxuICB9XHJcblxyXG5cclxuICBzdGF0aWMgcmVnaXN0ZXIoZ3JpZCA6IERHLkdyaWQpIDogYm9vbGVhbiB7XHJcbiAgICBpZihSZW5kZXJlclVJTWFuYWdlci5pc1JlZ2lzdGVyZWQoZ3JpZCkpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG1hbmFnZXIgPSBuZXcgUmVuZGVyZXJVSU1hbmFnZXJJbXBsKGdyaWQpO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdW5yZWdpc3RlcihncmlkIDogREcuR3JpZCkgOiBib29sZWFuIHtcclxuICAgIGlmKCFSZW5kZXJlclVJTWFuYWdlci5pc1JlZ2lzdGVyZWQoZ3JpZCkpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGRhcnQgPSBERy50b0RhcnQoZ3JpZCk7XHJcbiAgICBjb25zdCBtYW5hZ2VyID0gZGFydC5tX21hbmFnZXJVSVJlbmRlcmVyO1xyXG4gICAgbWFuYWdlci5kaXNwb3NlKCk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcbn1cclxuIl19