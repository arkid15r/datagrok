export function getFontSize(strFont) {
    const nIdxPX = strFont.indexOf("px", 0);
    if (nIdxPX < 0) {
        return -1;
    }
    let strSize = "";
    for (let n = nIdxPX - 1; n >= 0; --n) {
        if (strFont.charAt(n) === ' ') {
            strSize = strFont.substring(n + 1, nIdxPX);
            const nSize = parseInt(strSize);
            return nSize;
        }
    }
    strSize = strFont.substring(0, nIdxPX);
    const nSize = parseInt(strSize);
    return nSize;
}
export function setFontSize(strFont, nSize) {
    const nIdxPX = strFont.indexOf("px", 0);
    if (nIdxPX < 0) {
        return strFont;
    }
    let strSize = "";
    for (let n = nIdxPX - 1; n >= 0; --n) {
        if (strFont.charAt(n) === ' ') {
            strSize = strFont.substring(n + 1, nIdxPX);
            const str = strFont.replace(strSize, nSize.toString());
            return str;
        }
    }
    strSize = strFont.substring(0, nIdxPX);
    const str = strFont.replace(strSize, nSize.toString());
    return str;
}
export function trimText(str, g, nWidth) {
    let tm = g.measureText(str);
    let nW = tm.width;
    if (nW <= nWidth)
        return str;
    //let nHFont = tm.actualBoundingBoxAscent + tm.actualBoundingBoxDescent;
    let strDots = "...";
    tm = g.measureText(strDots);
    let nWDots = tm.width;
    if (nWDots > nWidth) {
        strDots = "..";
        tm = g.measureText(strDots);
        nWDots = tm.width;
        if (nWDots <= nWidth)
            return strDots;
        strDots = ".";
        tm = g.measureText(strDots);
        nWDots = tm.width;
        return nWDots <= nWidth ? strDots : "";
    }
    let nWAvail = nWidth - nWDots;
    let strW = "W";
    tm = g.measureText(strW);
    let nWW = tm.width;
    let nCharCount = Math.floor(nWAvail / nWW);
    let strAdj = str.substring(0, nCharCount);
    tm = g.measureText(strAdj);
    if (tm.width > nWAvail) {
        for (var n = nCharCount - 1; n >= 0; --n) {
            strAdj = str.substring(0, n);
            tm = g.measureText(strAdj);
            if (tm.width <= nWAvail)
                return strAdj + strDots;
        }
    }
    else {
        let strAdjOld = strAdj;
        for (var n = nCharCount + 1; n < str.length; ++n) {
            strAdj = str.substring(0, n);
            tm = g.measureText(strAdj);
            if (tm.width > nWAvail)
                return strAdjOld + strDots;
            strAdjOld = strAdj;
        }
    }
    return "...";
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGV4dFV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVGV4dFV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE1BQU0sVUFBVSxXQUFXLENBQUMsT0FBZ0I7SUFDMUMsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDeEMsSUFBRyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ2IsT0FBTyxDQUFDLENBQUMsQ0FBQztLQUNYO0lBRUQsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQ2pCLEtBQUksSUFBSSxDQUFDLEdBQUMsTUFBTSxHQUFDLENBQUMsRUFBRSxDQUFDLElBQUcsQ0FBQyxFQUFHLEVBQUUsQ0FBQyxFQUFFO1FBQy9CLElBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7WUFDNUIsT0FBTyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUN6QyxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDaEMsT0FBTyxLQUFLLENBQUM7U0FDZDtLQUNGO0lBRUQsT0FBTyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZDLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoQyxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLE9BQWdCLEVBQUUsS0FBYztJQUMxRCxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN4QyxJQUFHLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDYixPQUFPLE9BQU8sQ0FBQztLQUNoQjtJQUVELElBQUksT0FBTyxHQUFHLEVBQUUs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Q0FBQyxLQUFLLElBQUksT0FBTztnQkFDcEIsT0FBTyxNQUFNLEdBQUcsT0FBTyxDQUFDO1NBQzNCO0tBQ0Y7U0FFRDtRQUNFLElBQUksU0FBUyxHQUFHLE1BQU0sQ0FBQztRQUN2QixLQUFJLElBQUksQ0FBQyxHQUFDLFVBQVUsR0FBRSxDQUFDLEVBQUUsQ0FBQyxHQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQzFDO1lBQ0UsTUFBTSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzdCLEVBQUUsR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzNCLElBQUcsRUFBRSxDQUFDLEtBQUssR0FBRyxPQUFPO2dCQUNuQixPQUFPLFNBQVMsR0FBRyxPQUFPLENBQUM7WUFFN0IsU0FBUyxHQUFHLE1BQU0sQ0FBQztTQUNwQjtLQUNGO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRGb250U2l6ZShzdHJGb250IDogc3RyaW5nKSA6IG51bWJlciB7XHJcbiAgY29uc3QgbklkeFBYID0gc3RyRm9udC5pbmRleE9mKFwicHhcIiwgMCk7XHJcbiAgaWYobklkeFBYIDwgMCkge1xyXG4gICAgcmV0dXJuIC0xO1xyXG4gIH1cclxuXHJcbiAgbGV0IHN0clNpemUgPSBcIlwiO1xyXG4gIGZvcihsZXQgbj1uSWR4UFgtMTsgbiA+PTA7ICAtLW4pIHtcclxuICAgIGlmKHN0ckZvbnQuY2hhckF0KG4pID09PSAnICcpIHtcclxuICAgICAgc3RyU2l6ZSA9IHN0ckZvbnQuc3Vic3RyaW5nKG4rMSwgbklkeFBYKTtcclxuICAgICAgY29uc3QgblNpemUgPSBwYXJzZUludChzdHJTaXplKTtcclxuICAgICAgcmV0dXJuIG5TaXplO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RyU2l6ZSA9IHN0ckZvbnQuc3Vic3RyaW5nKDAsIG5JZHhQWCk7XHJcbiAgY29uc3QgblNpemUgPSBwYXJzZUludChzdHJTaXplKTtcclxuICByZXR1cm4gblNpemU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRGb250U2l6ZShzdHJGb250IDogc3RyaW5nLCBuU2l6ZSA6IG51bWJlcikgOiBzdHJpbmcge1xyXG4gIGNvbnN0IG5JZHhQWCA9IHN0ckZvbnQuaW5kZXhPZihcInB4XCIsIDApO1xyXG4gIGlmKG5JZHhQWCA8IDApIHtcclxuICAgIHJldHVybiBzdHJGb250O1xyXG4gIH1cclxuXHJcbiAgbGV0IHN0clNpemUgPSBcIlwiO1xyXG4gIGZvcihsZXQgbj1uSWR4UFgtMTsgbiA+PTA7ICAtLW4pIHtcclxuICAgIGlmKHN0ckZvbnQuY2hhckF0KG4pID09PSAnICcpIHtcclxuICAgICAgc3RyU2l6ZSA9IHN0ckZvbnQuc3Vic3RyaW5nKG4rMSwgbklkeFBYKTtcclxuICAgICAgY29uc3Qgc3RyID0gc3RyRm9udC5yZXBsYWNlKHN0clNpemUsIG5TaXplLnRvU3RyaW5nKCkpO1xyXG4gICAgICByZXR1cm4gc3RyO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RyU2l6ZSA9IHN0ckZvbnQuc3Vic3RyaW5nKDAsIG5JZHhQWCk7XHJcbiAgY29uc3Qgc3RyID0gc3RyRm9udC5yZXBsYWNlKHN0clNpemUsIG5TaXplLnRvU3RyaW5nKCkpO1xyXG4gIHJldHVybiBzdHI7XHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRyaW1UZXh0KHN0ciA6IHN0cmluZywgZyA6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgbldpZHRoIDogbnVtYmVyKSA6IHN0cmluZyB7XHJcbiAgbGV0IHRtID0gZy5tZWFzdXJlVGV4dChzdHIpO1xyXG4gIGxldCBuVyAgPSB0bS53aWR0aDtcclxuICBpZihuVyA8PSBuV2lkdGgpXHJcbiAgICByZXR1cm4gc3RyO1xyXG5cclxuICAvL2xldCBuSEZvbnQgPSB0bS5hY3R1YWxCb3VuZGluZ0JveEFzY2VudCArIHRtLmFjdHVhbEJvdW5kaW5nQm94RGVzY2VudDtcclxuICBsZXQgc3RyRG90cyA9IFwiLi4uXCI7XHJcbiAgdG0gPSBnLm1lYXN1cmVUZXh0KHN0ckRvdHMpO1xyXG4gIGxldCBuV0RvdHMgID0gdG0ud2lkdGg7XHJcbiAgaWYobldEb3RzID4gbldpZHRoKVxyXG4gIHtcclxuICAgIHN0ckRvdHMgPSBcIi4uXCI7XHJcbiAgICB0bSA9IGcubWVhc3VyZVRleHQoc3RyRG90cyk7XHJcbiAgICBuV0RvdHMgPSB0bS53aWR0aDtcclxuICAgIGlmKG5XRG90cyA8PSBuV2lkdGgpXHJcbiAgICAgIHJldHVybiAgc3RyRG90cztcclxuXHJcbiAgICBzdHJEb3RzID0gXCIuXCI7XHJcbiAgICB0bSA9IGcubWVhc3VyZVRleHQoc3RyRG90cyk7XHJcbiAgICBuV0RvdHMgPSB0bS53aWR0aDtcclxuICAgIHJldHVybiBuV0RvdHMgPD0gbldpZHRoID8gc3RyRG90cyA6IFwiXCI7XHJcbiAgfVxyXG5cclxuICBsZXQgbldBdmFpbCA9IG5XaWR0aCAtIG5XRG90cztcclxuICBsZXQgc3RyVyA9IFwiV1wiO1xyXG4gIHRtID0gZy5tZWFzdXJlVGV4dChzdHJXKTtcclxuICBsZXQgbldXID0gdG0ud2lkdGg7XHJcblxyXG4gIGxldCBuQ2hhckNvdW50ID0gTWF0aC5mbG9vcihuV0F2YWlsIC8gbldXKTtcclxuICBsZXQgc3RyQWRqID0gc3RyLnN1YnN0cmluZygwLCBuQ2hhckNvdW50KTtcclxuICB0bSA9IGcubWVhc3VyZVRleHQoc3RyQWRqKTtcclxuICBpZih0bS53aWR0aCA+IG5XQXZhaWwpXHJcbiAge1xyXG4gICAgZm9yKHZhciBuPW5DaGFyQ291bnQgLTE7IG4+PTA7IC0tbilcclxuICAgIHtcclxuICAgICAgc3RyQWRqID0gc3RyLnN1YnN0cmluZygwLCBuKTtcclxuICAgICAgdG0gPSBnLm1lYXN1cmVUZXh0KHN0ckFkaik7XHJcbiAgICAgIGlmKHRtLndpZHRoIDw9IG5XQXZhaWwpXHJcbiAgICAgICAgcmV0dXJuIHN0ckFkaiArIHN0ckRvdHM7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGVsc2VcclxuICB7XHJcbiAgICBsZXQgc3RyQWRqT2xkID0gc3RyQWRqO1xyXG4gICAgZm9yKHZhciBuPW5DaGFyQ291bnQgKzE7IG48c3RyLmxlbmd0aDsgKytuKVxyXG4gICAge1xyXG4gICAgICBzdHJBZGogPSBzdHIuc3Vic3RyaW5nKDAsIG4pO1xyXG4gICAgICB0bSA9IGcubWVhc3VyZVRleHQoc3RyQWRqKTtcclxuICAgICAgaWYodG0ud2lkdGggPiBuV0F2YWlsKVxyXG4gICAgICAgIHJldHVybiBzdHJBZGpPbGQgKyBzdHJEb3RzO1xyXG5cclxuICAgICAgc3RyQWRqT2xkID0gc3RyQWRqO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gXCIuLi5cIjtcclxufVxyXG4iXX0=