import * as DG from 'datagrok-api/dg';
import * as TextUtils from "./TextUtils";
/*
const canvas = ui.canvas(200*r, 300*r);

cellGrid.renderer.render(10, 10, 200, 300);

const r = window.devicePixelRatio;
x = r * x; y = r * y;
w = r * w; h = r * h;
*/
export function getGridDartPopupMenu() {
    let eDiv = null;
    const cDiv = document.getElementsByClassName('d4-menu-item-container d4-vert-menu d4-menu-popup');
    for (let n = 0; n < cDiv.length; ++n) {
        eDiv = cDiv.item(n);
        return eDiv;
    }
    return null;
}
export function getToolIconDiv(grid) {
    const cImg = document.getElementsByClassName('grok-icon grok-font-icon-menu');
    let eDivHamb = null;
    let eParent = null;
    for (let n = 0; n < cImg.length; ++n) {
        eDivHamb = cImg.item(n).parentElement;
        if (eDivHamb == null)
            return null;
        if ((eDivHamb === null || eDivHamb === void 0 ? void 0 : eDivHamb.getAttribute('column_name')) !== null) { //'data') === 'ColHamb') {
            eParent = eDivHamb.parentElement;
            while (eParent !== null) {
                if (eParent === grid.root)
                    return eDivHamb;
                eParent = eParent.parentElement;
            }
        }
    }
    return null;
}
export function isHitTestOnElement(eElem, eMouse) {
    const eElemHit = document.elementFromPoint(eMouse.clientX, eMouse.clientY);
    const b = eElemHit == eElem;
    return b;
}
export function isRowHeader(colGrid) {
    return colGrid.idx === 0 || colGrid.name === 'row header';
}
export function getInstalledGridForColumn(colGrid) {
    const dart = DG.toDart(colGrid);
    if (!(dart.m_grid instanceof DG.Grid))
        return null;
    return dart.m_grid;
}
export function installGridForColumn(grid, colGrid) {
    if (colGrid.grid instanceof DG.Grid)
        return false;
    const dart = DG.toDart(colGrid);
    if (dart.m_grid instanceof DG.Grid)
        return false;
    dart.m_grid = grid;
    return true;
}
export function setGridColumnRenderer(colGrid, renderer) {
    const dart = DG.toDart(colGrid);
    dart.m_renderer = renderer;
}
export function getGridColumnRenderer(colGrid) {
    const dart = DG.toDart(colGrid);
    const renderer = dart.m_renderer;
    if (renderer === undefined)
        return null;
    return renderer;
}
export function getGridColumnHeaderHeight(grid) {
    const options = grid.getOptions(true);
    let nHColHeader = options.look.colHeaderHeight;
    if (nHColHeader === null || nHColHeader === undefined) { //DG bug
        const cellGrid = grid.hitTest(2, 2); //.cell(col.name, 0);
        if (cellGrid !== null) {
            const rc = cellGrid.bounds;
            return rc.y;
            //console.log('rc.y ' + rc.y + " rc.h= " + rc.height + " row " + cellGrid.gridRow + " name " +  cellGrid.gridColumn.name);
        }
    }
    return nHColHeader;
}
export function getGridRowHeight(grid) {
    const options = grid.getOptions(true);
    const nHRow = options.look.rowHeight;
    if (nHRow === null || nHRow === undefined) { //DG bug
        let col = null;
        const nColCount = grid.columns.length;
        for (let nCol = 0; nCol < nColCount; ++nCol) {
            col = grid.columns.byIndex(nCol);
            if (col === null || !col.visible)
                continue;
            const cellGrid = grid.cell(col.name, 0);
            const rc = cellGrid.bounds;
            return rc.height;
        }
        return -1;
    }
    return nHRow;
}
export function getGridVisibleRowCount(grid) {
    const dframe = grid.dataFrame;
    const bitsetFilter = dframe.filter;
    const nRowCount = bitsetFilter.trueCount + Array.from(grid.pinnedRows).length;
    //my changes pinned rows const nRowCount = bitsetFilter.trueCount + Array.from(grid.pinnedRows).length;
    return nRowCount;
}
export function fillVisibleViewportRows(arMinMaxRowIdxs, grid) {
    if (arMinMaxRowIdxs.length !== 2)
        throw new Error("Array to cobtain indices must have the length 2.");
    const scroll = grid.vertScroll;
    const nRowMin = Math.floor(scroll.min);
    let nRowMax = Math.ceil(scroll.max);
    const nRowCount = getGridVisibleRowCount(grid);
    if (nRowMax >= nRowCount) {
        nRowMax = nRowCount - 1;
    }
    arMinMaxRowIdxs[0] = nRowMin;
    arMinMaxRowIdxs[1] = nRowMax;
    //console.log('min: ' + scroll.min + " max: " + scroll.max + ' nRowMax ' + nRowMax + " nVisRowCount: " + nRowCount);
}
export function fillVisibleViewportGridCells(arColRowIdxs, grid) {
    if (arColRowIdxs.length !== 4)
        throw new Error("Array to cobtain bound row column indices must have the length 4.");
    const arRowIdxs = [];
    const arColIdxs = [];
    const lstVisibleCells = grid.getVisibleCells();
    for (let cellGTmp of lstVisibleCells) {
        if (!arRowIdxs.includes(cellGTmp.gridRow))
            arRowIdxs.push(cellGTmp.gridRow);
        if (!arColIdxs.includes(cellGTmp.gridColumn.idx))
            arColIdxs.push(cellGTmp.gridColumn.idx);
    }
    const nRowMin = arRowIdxs.length === 0 ? -1 : arRowIdxs[0];
    const nRowMax = arRowIdxs.length === 0 ? -2 : arRowIdxs[arRowIdxs.length - 1];
    arColRowIdxs[0] = arColIdxs.length === 0 ? -1 : arColIdxs[0];
    arColRowIdxs[1] = arColIdxs.length === 0 ? -2 : arColIdxs[arColIdxs.length - 1];
    arColRowIdxs[2] = nRowMin;
    arColRowIdxs[3] = nRowMax;
}
export function getActiveGridRow(grid) {
    const dframe = grid.dataFrame;
    const nRowTableActive = dframe.currentRow.idx;
    const nGridColCount = grid.columns.length;
    let colGrid = null;
    let cellGrid = null;
    for (let nCol = 0; nCol < nGridColCount; ++nCol) {
        colGrid = grid.columns.byIndex(nCol);
        if (colGrid === null || colGrid === void 0 ? void 0 : colGrid.visible) {
            const nGridRowCount = dframe.filter.trueCount;
            for (let nR = 0; nR < nGridRowCount; ++nR) {
                cellGrid = grid.cell(colGrid.name, nR);
                if (cellGrid.tableRowIndex === null || nRowTableActive === null)
                    continue;
                if (cellGrid.tableRowIndex === nRowTableActive)
                    return nR;
            }
            return -1;
        }
    }
    return -1;
}
const m_mapScaledFonts = new Map();
export function scaleFont(font, fFactor) {
    if (fFactor === 1.0) {
        return font;
    }
    const strKey = font + fFactor.toString();
    let fontScaled = m_mapScaledFonts.get(strKey);
    if (fontScaled !== undefined)
        return fontScaled;
    const nFontSize = TextUtils.getFontSize(font);
    fontScaled = TextUtils.setFontSize(font, Math.ceil(nFontSize * fFactor));
    m_mapScaledFonts.set(strKey, fontScaled);
    return fontScaled;
}
export function paintColHeaderCell(g, nX, nY, nW, nH, colGrid) {
    if (g === null)
        return;
    g.fillStyle = "white";
    g.fillRect(nX * window.devicePixelRatio, nY * window.devicePixelRatio, nW * window.devicePixelRatio, nH * window.devicePixelRatio);
    const grid = colGrid.grid;
    const options = grid.getOptions(true);
    const font = options.look.colHeaderFont == null || options.look.colHeaderFont === undefined ? "bold 14px Volta Text, Arial" : options.look.colHeaderFont;
    const fontNew = scaleFont(font, window.devicePixelRatio);
    g.font = fontNew;
    let str = TextUtils.trimText(colGrid.name, g, nW);
    const tm = g.measureText(str);
    const nWLabel = tm.width;
    const nAscent = Math.abs(tm.actualBoundingBoxAscent);
    const nDescent = tm.actualBoundingBoxDescent;
    const nHFont = nAscent + nDescent; // + 2*nYInset;
    const nHH = nH * window.devicePixelRatio;
    g.textAlign = 'start';
    g.fillStyle = "Black";
    const nXX = nX * window.devicePixelRatio + Math.ceil(3 * window.devicePixelRatio); //((nW*window.devicePixelRatio - nWLabel) >> 1);
    const nYY = (nY * window.devicePixelRatio + nHH - Math.ceil(3 * window.devicePixelRatio)); //-2*window.devicePixelRatio);
    g.fillText(str, nXX, nYY);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR3JpZFV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiR3JpZFV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFdEMsT0FBTyxLQUFLLFNBQVMsTUFBTSxhQUFhLENBQUM7QUFDekM7Ozs7Ozs7O0VBUUU7QUFFRixNQUFNLFVBQVUsb0JBQW9CO0lBRWxDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztJQUNoQixNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsc0JBQXNCLENBQUMsbURBQW1ELENBQUMsQ0FBQztJQUNsRyxLQUFJLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLEdBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRTtRQUMvQixJQUFJLEdBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQWlCLENBQUM7UUFDckMsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUdELE1BQU0sVUFBVSxjQUFjLENBQUMsSUFBYztJQUUzQyxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsc0JBQXNCLENBQUMsK0JBQStCLENBQUMsQ0FBQztJQUU5RSxJQUFJLFFBQVEsR0FBd0IsSUFBSSxDQUFDO0lBQ3pDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQztJQUNuQixLQUFJLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLEdBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRTtRQUMvQixRQUFRLEdBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQWlCLENBQUMsYUFBYSxDQUFDO1FBQ3ZELElBQUcsUUFBUSxJQUFJLElBQUk7WUFDakIsT0FBTyxJQUFJLENBQUM7UUFFZCxJQUFHLENBQUEsUUFBUSxhQUFSLFFBQVEsdUJBQVIsUUFBUSxDQUFFLFlBQVksQ0FBQyxhQUFhLENB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Q0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7WUFDdEMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFbkMsSUFBRyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUM7WUFDN0MsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQzNDO0lBRUQsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0QsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsQ0FBQztJQUU1RSxZQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0QsWUFBWSxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUUsQ0FBQyxDQUFDLENBQUM7SUFDL0UsWUFBWSxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQztJQUMxQixZQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDO0FBQzVCLENBQUM7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsSUFBYTtJQUM1QyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO0lB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QUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUM1QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgREcgZnJvbSAnZGF0YWdyb2stYXBpL2RnJztcclxuaW1wb3J0IHtHcmlkQ2VsbFJlbmRlcmVyRXh9IGZyb20gXCIuLi9yZW5kZXJlci9HcmlkQ2VsbFJlbmRlcmVyRXhcIjtcclxuaW1wb3J0ICogYXMgVGV4dFV0aWxzIGZyb20gXCIuL1RleHRVdGlsc1wiO1xyXG4vKlxyXG5jb25zdCBjYW52YXMgPSB1aS5jYW52YXMoMjAwKnIsIDMwMCpyKTtcclxuXHJcbmNlbGxHcmlkLnJlbmRlcmVyLnJlbmRlcigxMCwgMTAsIDIwMCwgMzAwKTtcclxuXHJcbmNvbnN0IHIgPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcclxueCA9IHIgKiB4OyB5ID0gciAqIHk7XHJcbncgPSByICogdzsgaCA9IHIgKiBoO1xyXG4qL1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEdyaWREYXJ0UG9wdXBNZW51KCkgOiBIVE1MRWxlbWVudCB8IG51bGwge1xyXG5cclxuICBsZXQgZURpdiA9IG51bGw7XHJcbiAgY29uc3QgY0RpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2Q0LW1lbnUtaXRlbS1jb250YWluZXIgZDQtdmVydC1tZW51IGQ0LW1lbnUtcG9wdXAnKTtcclxuICBmb3IobGV0IG49MDsgbjxjRGl2Lmxlbmd0aDsgKytuKSB7XHJcbiAgICBlRGl2ID0gKGNEaXYuaXRlbShuKSBhcyBIVE1MRWxlbWVudCk7XHJcbiAgICByZXR1cm4gZURpdjtcclxuICB9XHJcbiAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VG9vbEljb25EaXYoZ3JpZCA6IERHLkdyaWQpIDogSFRNTEVsZW1lbnQgfCBudWxsIHtcclxuXHJcbiAgY29uc3QgY0ltZyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2dyb2staWNvbiBncm9rLWZvbnQtaWNvbi1tZW51Jyk7XHJcblxyXG4gIGxldCBlRGl2SGFtYiA6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGw7XHJcbiAgbGV0IGVQYXJlbnQgPSBudWxsO1xyXG4gIGZvcihsZXQgbj0wOyBuPGNJbWcubGVuZ3RoOyArK24pIHtcclxuICAgIGVEaXZIYW1iID0gKGNJbWcuaXRlbShuKSBhcyBIVE1MRWxlbWVudCkucGFyZW50RWxlbWVudDtcclxuICAgIGlmKGVEaXZIYW1iID09IG51bGwpXHJcbiAgICAgIHJldHVybiBudWxsO1xyXG5cclxuICAgIGlmKGVEaXZIYW1iPy5nZXRBdHRyaWJ1dGUoJ2NvbHVtbl9uYW1lJykgIT09IG51bGwpey8vJ2RhdGEnKSA9PT0gJ0NvbEhhbWInKSB7XHJcbiAgICAgIGVQYXJlbnQgPSBlRGl2SGFtYi5wYXJlbnRFbGVtZW50O1xyXG4gICAgICB3aGlsZShlUGFyZW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgaWYoZVBhcmVudCA9PT0gZ3JpZC5yb290KVxyXG4gICAgICAgICAgcmV0dXJuIGVEaXZIYW1iO1xyXG5cclxuICAgICAgICBlUGFyZW50ID0gZVBhcmVudC5wYXJlbnRFbGVtZW50O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBudWxsO1xyXG59XHJcblxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0hpdFRlc3RPbkVsZW1lbnQoZUVsZW06IEhUTUxFbGVtZW50LCBlTW91c2UgOiBNb3VzZUV2ZW50KSA6IGJvb2xlYW4ge1xyXG4gIGNvbnN0IGVFbGVtSGl0ID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludChlTW91c2UuY2xpZW50WCwgZU1vdXNlLmNsaWVudFkpO1xyXG4gIGNvbnN0IGIgPSBlRWxlbUhpdCA9PSBlRWxlbTtcclxuICByZXR1cm4gYjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzUm93SGVhZGVyKGNvbEdyaWQgOiBERy5HcmlkQ29sdW1uKSA6IGJvb2xlYW4ge1xyXG4gIHJldHVybiBjb2xHcmlkLmlkeCA9PT0gMCB8fCBjb2xHcmlkLm5hbWUgPT09ICdyb3cgaGVhZGVyJztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEluc3RhbGxlZEdyaWRGb3JDb2x1bW4oY29sR3JpZCA6IERHLkdyaWRDb2x1bW4pIDogREcuR3JpZCB8IG51bGwge1xyXG4gIGNvbnN0IGRhcnQgOiBhbnkgPSBERy50b0RhcnQoY29sR3JpZCk7XHJcbiAgaWYoIShkYXJ0Lm1fZ3JpZCBpbnN0YW5jZW9mIERHLkdyaWQpKVxyXG4gICAgcmV0dXJuIG51bGw7XHJcblxyXG4gIHJldHVybiBkYXJ0Lm1fZ3JpZDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluc3RhbGxHcmlkRm9yQ29sdW1uKGdyaWQgOiBERy5HcmlkLCBjb2xHcmlkIDogREcuR3JpZENvbHVtbikgOiBib29sZWFuIHtcclxuICBpZihjb2xHcmlkLmdyaWQgaW5zdGFuY2VvZiBERy5HcmlkKVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICBjb25zdCBkYXJ0IDogYW55ID0gREcudG9EYXJ0KGNvbEdyaWQpO1xyXG4gIGlmKGRhcnQubV9ncmlkIGluc3RhbmNlb2YgREcuR3JpZClcclxuICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgZGFydC5tX2dyaWQgPSBncmlkO1xyXG4gIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldEdyaWRDb2x1bW5SZW5kZXJlcihjb2xHcmlkIDogREcuR3JpZENvbHVtbiwgcmVuZGVyZXIgOiBHcmlkQ2VsbFJlbmRlcmVyRXgpIDogdm9pZCB7XHJcbiAgY29uc3QgZGFydCA6IGFueSA9IERHLnRvRGFydChjb2xHcmlkKTtcclxuICBkYXJ0Lm1fcmVuZGVyZXIgPSByZW5kZXJlcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEdyaWRDb2x1bW5SZW5kZXJlcihjb2xHcmlkIDogREcuR3JpZENvbHVtbikgOiBHcmlkQ2VsbFJlbmRlcmVyRXggfCBudWxsIHtcclxuICBjb25zdCBkYXJ0IDogYW55ID0gREcudG9EYXJ0KGNvbEdyaWQpO1xyXG4gIGNvbnN0IHJlbmRlcmVyID0gZGFydC5tX3JlbmRlcmVyO1xyXG4gIGlmKHJlbmRlcmVyID09PSB1bmRlZmluZWQpXHJcbiAgICByZXR1cm4gbnVsbDtcclxuXHJcbiAgcmV0dXJuIHJlbmRlcmVyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0R3JpZENvbHVtbkhlYWRlckhlaWdodChncmlkIDogREcuR3JpZCkgOiBudW1iZXIge1xyXG4gIGNvbnN0IG9wdGlvbnMgOiBhbnkgPSBncmlkLmdldE9wdGlvbnModHJ1ZSk7XHJcbiAgbGV0IG5IQ29sSGVhZGVyID0gb3B0aW9ucy5sb29rLmNvbEhlYWRlckhlaWdodDtcclxuICBpZihuSENvbEhlYWRlciA9PT0gbnVsbCB8fCBuSENvbEhlYWRlciA9PT0gdW5kZWZpbmVkKSB7Ly9ERyBidWdcclxuXHJcbiAgICBjb25zdCBjZWxsR3JpZCA9IGdyaWQuaGl0VGVzdCgyLDIpOy8vLmNlbGwoY29sLm5hbWUsIDApO1xyXG4gICAgaWYoY2VsbEdyaWQgIT09IG51bGwpIHtcclxuICAgICAgY29uc3QgcmMgPSBjZWxsR3JpZC5ib3VuZHM7XHJcbiAgICAgIHJldHVybiByYy55O1xyXG4gICAgICAvL2NvbnNvbGUubG9nKCdyYy55ICcgKyByYy55ICsgXCIgcmMuaD0gXCIgKyByYy5oZWlnaHQgKyBcIiByb3cgXCIgKyBjZWxsR3JpZC5ncmlkUm93ICsgXCIgbmFtZSBcIiArICBjZWxsR3JpZC5ncmlkQ29sdW1uLm5hbWUpO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbkhDb2xIZWFkZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRHcmlkUm93SGVpZ2h0KGdyaWQgOiBERy5HcmlkKSA6IG51bWJlciB7XHJcbiAgY29uc3Qgb3B0aW9ucyA6IGFueSA9IGdyaWQuZ2V0T3B0aW9ucyh0cnVlKTtcclxuICBjb25zdCBuSFJvdyA9ICBvcHRpb25zLmxvb2sucm93SGVpZ2h0O1xyXG4gIGlmKG5IUm93ID09PSBudWxsIHx8IG5IUm93ID09PSB1bmRlZmluZWQpIHsvL0RHIGJ1Z1xyXG4gICAgbGV0IGNvbCA9IG51bGw7XHJcbiAgICBjb25zdCBuQ29sQ291bnQgPSBncmlkLmNvbHVtbnMubGVuZ3RoO1xyXG4gICAgZm9yKGxldCBuQ29sPTA7IG5Db2w8bkNvbENvdW50OyArK25Db2wpIHtcclxuICAgICAgY29sID0gZ3JpZC5jb2x1bW5zLmJ5SW5kZXgobkNvbCk7XHJcbiAgICAgIGlmKGNvbCA9PT0gbnVsbCB8fCAhY29sLnZpc2libGUpXHJcbiAgICAgICAgY29udGludWU7XHJcblxyXG4gICAgICBjb25zdCBjZWxsR3JpZCA9IGdyaWQuY2VsbChjb2wubmFtZSwgMCk7XHJcbiAgICAgIGNvbnN0IHJjID0gY2VsbEdyaWQuYm91bmRzO1xyXG4gICAgICByZXR1cm4gcmMuaGVpZ2h0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIC0xO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG5IUm93O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0R3JpZFZpc2libGVSb3dDb3VudChncmlkIDogREcuR3JpZCkgOiBudW1iZXIge1xyXG4gIGNvbnN0IGRmcmFtZSA9IGdyaWQuZGF0YUZyYW1lO1xyXG4gIGNvbnN0IGJpdHNldEZpbHRlciA9IGRmcmFtZS5maWx0ZXI7XHJcbiAgY29uc3QgblJvd0NvdW50ID0gYml0c2V0RmlsdGVyLnRydWVDb3VudCArIEFycmF5LmZyb20oZ3JpZC5waW5uZWRSb3dzKS5sZW5ndGg7XHJcbiAgLy9teSBjaGFuZ2VzIHBpbm5lZCByb3dzIGNvbnN0IG5Sb3dDb3VudCA9IGJpdHNldEZpbHRlci50cnVlQ291bnQgKyBBcnJheS5mcm9tKGdyaWQucGlubmVkUm93cykubGVuZ3RoO1xyXG4gIHJldHVybiBuUm93Q291bnQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmaWxsVmlzaWJsZVZpZXdwb3J0Um93cyhhck1pbk1heFJvd0lkeHMgOiBBcnJheTxudW1iZXI+LCBncmlkIDogREcuR3JpZCkgOiB2b2lkIHtcclxuICBpZihhck1pbk1heFJvd0lkeHMubGVuZ3RoICE9PSAyKVxyXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQXJyYXkgdG8gY29idGFpbiBpbmRpY2VzIG11c3QgaGF2ZSB0aGUgbGVuZ3RoIDIuXCIpO1xyXG5cclxuICBjb25zdCBzY3JvbGwgPSBncmlkLnZlcnRTY3JvbGw7XHJcbiAgY29uc3QgblJvd01pbiA9IE1hdGguZmxvb3Ioc2Nyb2xsLm1pbik7XHJcbiAgbGV0IG5Sb3dNYXggPSBNYXRoLmNlaWwoc2Nyb2xsLm1heCk7XHJcbiAgY29uc3QgblJvd0NvdW50ID0gZ2V0R3JpZFZpc2libGVSb3dDb3VudChncmlkKTtcclxuICBpZihuUm93TWF4ID49IG5Sb3dDb3VudCkge1xyXG4gICAgblJvd01heCA9IG5Sb3dDb3VudCAtMTtcclxuICB9XHJcblxyXG4gIGFyTWluTWF4Um93SWR4c1swXSA9IG5Sb3dNaW47XHJcbiAgYXJNaW5NYXhSb3dJZHhzWzFdID0gblJvd01heDtcclxuICAvL2NvbnNvbGUubG9nKCdtaW46ICcgKyBzY3JvbGwubWluICsgXCIgbWF4OiBcIiArIHNjcm9sbC5tYXggKyAnIG5Sb3dNYXggJyArIG5Sb3dNYXggKyBcIiBuVmlzUm93Q291bnQ6IFwiICsgblJvd0NvdW50KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZpbGxWaXNpYmxlVmlld3BvcnRHcmlkQ2VsbHMoYXJDb2xSb3dJZHhzIDogQXJyYXk8bnVtYmVyPiwgZ3JpZCA6IERHLkdyaWQpXHJcbntcclxuICBpZihhckNvbFJvd0lkeHMubGVuZ3RoICE9PSA0KVxyXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQXJyYXkgdG8gY29idGFpbiBib3VuZCByb3cgY29sdW1uIGluZGljZXMgbXVzdCBoYXZlIHRoZSBsZW5ndGggNC5cIik7XHJcblxyXG4gIGNvbnN0IGFyUm93SWR4cyA6IEFycmF5PG51bWJlcj4gPSBbXTtcclxuICBjb25zdCBhckNvbElkeHMgOiBBcnJheTxudW1iZXI+ID0gW107XHJcbiAgY29uc3QgbHN0VmlzaWJsZUNlbGxzID0gZ3JpZC5nZXRWaXNpYmxlQ2VsbHMoKTtcclxuICBmb3IobGV0IGNlbGxHVG1wIG9mIGxzdFZpc2libGVDZWxscylcclxuICB7XHJcbiAgICBpZighYXJSb3dJZHhzLmluY2x1ZGVzKGNlbGxHVG1wLmdyaWRSb3cpKVxyXG4gICAgICBhclJvd0lkeHMucHVzaChjZWxsR1RtcC5ncmlkUm93KTtcclxuXHJcbiAgICBpZighYXJDb2xJZHhzLmluY2x1ZGVzKGNlbGxHVG1wLmdyaWRDb2x1bW4uaWR4KSlcclxuICAgICAgYXJDb2xJZHhzLnB1c2goY2VsbEdUbXAuZ3JpZENvbHVtbi5pZHgpO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgblJvd01pbiA9IGFyUm93SWR4cy5sZW5ndGggPT09IDAgPyAtMSA6IGFyUm93SWR4c1swXTtcclxuICBjb25zdCBuUm93TWF4ID0gYXJSb3dJZHhzLmxlbmd0aCA9PT0gMCA/IC0yIDogYXJSb3dJZHhzW2FyUm93SWR4cy5sZW5ndGgtMV07XHJcblxyXG4gIGFyQ29sUm93SWR4c1swXSA9IGFyQ29sSWR4cy5sZW5ndGggPT09IDAgPyAtMSA6IGFyQ29sSWR4c1swXTtcclxuICBhckNvbFJvd0lkeHNbMV0gPSBhckNvbElkeHMubGVuZ3RoID09PSAwID8gLTIgOiBhckNvbElkeHNbYXJDb2xJZHhzLmxlbmd0aCAtMV07XHJcbiAgYXJDb2xSb3dJZHhzWzJdID0gblJvd01pbjtcclxuICBhckNvbFJvd0lkeHNbM10gPSBuUm93TWF4O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWN0aXZlR3JpZFJvdyhncmlkOiBERy5HcmlkKSB7XHJcbiAgY29uc3QgZGZyYW1lID0gZ3JpZC5kYXRhRnJhbWU7XHJcbiAgY29uc3QgblJvd1RhYmxlQWN0aXZlID0gZGZyYW1lLmN1cnJlbnRSb3cuaWR4O1xyXG4gIGNvbnN0IG5HcmlkQ29sQ291bnQgPSBncmlkLmNvbHVtbnMubGVuZ3RoO1xyXG4gIGxldCBjb2xHcmlkID0gbnVsbDtcclxuICBsZXQgY2VsbEdyaWQgPSBudWxsO1xyXG4gIGZvcihsZXQgbkNvbD0wOyBuQ29sPG5HcmlkQ29sQ291bnQ7ICsrbkNvbCkge1xyXG4gICAgY29sR3JpZCA9IGdyaWQuY29sdW1ucy5ieUluZGV4KG5Db2wpO1xyXG4gICAgaWYoY29sR3JpZD8udmlzaWJsZSkge1xyXG5cclxuICAgICAgY29uc3QgbkdyaWRSb3dDb3VudCA9IGRmcmFtZS5maWx0ZXIudHJ1ZUNvdW50O1xyXG4gICAgICBmb3IobGV0IG5SPTA7IG5SPG5HcmlkUm93Q291bnQ7ICsrblIpIHtcclxuICAgICAgICBjZWxsR3JpZCA9IGdyaWQuY2VsbChjb2xHcmlkLm5hbWUsIG5SKTtcclxuICAgICAgICBpZihjZWxsR3JpZC50YWJsZVJvd0luZGV4ID09PSBudWxsIHx8IG5Sb3dUYWJsZUFjdGl2ZSA9PT0gbnVsbClcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICBpZihjZWxsR3JpZC50YWJsZVJvd0luZGV4ID09PSBuUm93VGFibGVBY3RpdmUpXHJcbiAgICAgICAgICByZXR1cm4gblI7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gLTE7XHJcbn1cclxuXHJcblxyXG5jb25zdCBtX21hcFNjYWxlZEZvbnRzID0gbmV3IE1hcCgpO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlRm9udChmb250IDogc3RyaW5nLCBmRmFjdG9yIDogbnVtYmVyKSA6IHN0cmluZyB7XHJcbiAgaWYoZkZhY3RvciA9PT0gMS4wKSB7XHJcbiAgICByZXR1cm4gZm9udDtcclxuICB9XHJcblxyXG4gIGNvbnN0IHN0cktleSA9IGZvbnQgKyBmRmFjdG9yLnRvU3RyaW5nKCk7XHJcbiAgbGV0IGZvbnRTY2FsZWQgPSBtX21hcFNjYWxlZEZvbnRzLmdldChzdHJLZXkpO1xyXG4gIGlmKGZvbnRTY2FsZWQgIT09IHVuZGVmaW5lZClcclxuICAgIHJldHVybiBmb250U2NhbGVkO1xyXG5cclxuICBjb25zdCBuRm9udFNpemUgOiBudW1iZXIgPSBUZXh0VXRpbHMuZ2V0Rm9udFNpemUoZm9udCk7XHJcbiAgZm9udFNjYWxlZCA9IFRleHRVdGlscy5zZXRGb250U2l6ZShmb250LCBNYXRoLmNlaWwobkZvbnRTaXplICogZkZhY3RvcikpO1xyXG4gIG1fbWFwU2NhbGVkRm9udHMuc2V0KHN0cktleSwgZm9udFNjYWxlZCk7XHJcblxyXG4gIHJldHVybiBmb250U2NhbGVkO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGFpbnRDb2xIZWFkZXJDZWxsKGcgOiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgfCBudWxsLCBuWCA6IG51bWJlciwgblkgOiBudW1iZXIsIG5XOiBudW1iZXIsIG5IOiBudW1iZXIsIGNvbEdyaWQgOiBERy5HcmlkQ29sdW1uKSB7XHJcblxyXG4gIGlmKGcgPT09IG51bGwpXHJcbiAgICByZXR1cm47XHJcblxyXG4gIGcuZmlsbFN0eWxlID0gXCJ3aGl0ZVwiO1xyXG4gIGcuZmlsbFJlY3Qoblgqd2luZG93LmRldmljZVBpeGVsUmF0aW8sIG5ZKndpbmRvdy5kZXZpY2VQaXhlbFJhdGlvLCBuVyp3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbywgbkgqd2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xyXG5cclxuICBjb25zdCBncmlkID0gY29sR3JpZC5ncmlkO1xyXG4gIGNvbnN0IG9wdGlvbnMgOiBhbnkgPSBncmlkLmdldE9wdGlvbnModHJ1ZSk7XHJcblxyXG4gIGNvbnN0IGZvbnQgPSBvcHRpb25zLmxvb2suY29sSGVhZGVyRm9udCA9PSBudWxsIHx8IG9wdGlvbnMubG9vay5jb2xIZWFkZXJGb250ID09PSB1bmRlZmluZWQgPyBcImJvbGQgMTRweCBWb2x0YSBUZXh0LCBBcmlhbFwiIDogb3B0aW9ucy5sb29rLmNvbEhlYWRlckZvbnQ7XHJcbiAgY29uc3QgZm9udE5ldyA9IHNjYWxlRm9udChmb250LCB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XHJcbiAgZy5mb250ID0gZm9udE5ldztcclxuXHJcbiAgbGV0IHN0ciA9IFRleHRVdGlscy50cmltVGV4dChjb2xHcmlkLm5hbWUsIGcsIG5XKTtcclxuXHJcbiAgY29uc3QgdG0gPSBnLm1lYXN1cmVUZXh0KHN0cik7XHJcbiAgY29uc3QgbldMYWJlbCA9IHRtLndpZHRoO1xyXG5cclxuICBjb25zdCBuQXNjZW50ID0gTWF0aC5hYnModG0uYWN0dWFsQm91bmRpbmdCb3hBc2NlbnQpO1xyXG4gIGNvbnN0IG5EZXNjZW50ID0gdG0uYWN0dWFsQm91bmRpbmdCb3hEZXNjZW50O1xyXG4gIGNvbnN0IG5IRm9udCA9ICBuQXNjZW50ICsgbkRlc2NlbnQ7Ly8gKyAyKm5ZSW5zZXQ7XHJcblxyXG4gIGNvbnN0IG5ISCA9IG5IKndpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xyXG5cclxuICBnLnRleHRBbGlnbiA9ICdzdGFydCc7XHJcbiAgZy5maWxsU3R5bGUgPSBcIkJsYWNrXCI7XHJcbiAgY29uc3QgblhYID0gblgqd2luZG93LmRldmljZVBpeGVsUmF0aW8gKyBNYXRoLmNlaWwoMyp3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7Ly8oKG5XKndpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIC0gbldMYWJlbCkgPj4gMSk7XHJcbiAgY29uc3QgbllZID0gKG5ZKndpbmRvdy5kZXZpY2VQaXhlbFJhdGlvICsgbkhIIC0gTWF0aC5jZWlsKDMqd2luZG93LmRldmljZVBpeGVsUmF0aW8pKTsvLy0yKndpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTtcclxuICBnLmZpbGxUZXh0KHN0ciwgblhYLCBuWVkpO1xyXG59XHJcblxyXG5cclxuIl19